{
  "createdAt": "2025-09-03T08:29:23.372Z",
  "updatedAt": "2025-09-24T06:57:22.523Z",
  "id": "onEJNvmxhmWCE8mY",
  "name": "ask-data Omni Dashboard Search",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "authentication": "bearerAuth",
        "path": "97808398-be62-4e69-8cf7-0916688859d8"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 2,
      "position": [
        640,
        -864
      ],
      "id": "d6119acc-bdaa-48ea-a63c-44fa9bc8120e",
      "name": "MCP Server Trigger",
      "webhookId": "97808398-be62-4e69-8cf7-0916688859d8",
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "wzBcRrX0vk64pMBK",
          "name": "Zapier Inbound MCP Server"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "gpt-4",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        592,
        -400
      ],
      "id": "80dc83f2-bc74-4374-8bbb-90945747be0f",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "amfaI9YXiWesQ4eT",
          "name": "Azure Open AI gpt-4"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "omni_dashboard_discovery",
        "text": "you are a helpful assistant",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        704,
        -624
      ],
      "id": "185f8237-2808-43d3-b2ac-e47160384138",
      "name": "Omni Dashboard Discovery",
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents (dashboards) using the name",
        "method": "POST",
        "url": "https://ml16699-hya89079.snowflakecomputing.com/api/v2/databases/analytics_dev/schemas/dev_omni/cortex-search-services/omni_documents_search_service_dev:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"customer breakdown\",\n    \"columns\": [\n        \"name\",\n        \"identifier\",\n        \"scope\",\n        \"owner_name\",\n        \"folder_name\"\n    ],\n    \"filter\": {\n        \"@not\": {\n            \"@eq\": {\n                \"scope\": \"restricted\"\n            }\n        }\n    },\n    \"limit\": 3\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        960,
        -400
      ],
      "id": "ca85f5ca-3561-4c18-96bd-cd39b57c7a87",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "8394a134-6af3-4ec0-b605-3270129037cc",
        "authentication": "basicAuth",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        592,
        0
      ],
      "id": "af795adf-5242-4155-ba03-29e0ebe3feb9",
      "name": "Webhook",
      "webhookId": "8394a134-6af3-4ec0-b605-3270129037cc",
      "alwaysOutputData": true,
      "credentials": {
        "httpBasicAuth": {
          "id": "qYqaYFYnJhcQuBMI",
          "name": "Zapier Inbound Basic Auth Webhook"
        }
      }
    },
    {
      "parameters": {
        "description": "Snowflake Cortex Analyst tool to find relevant documents, document queries, and document query filters using SQL",
        "workflowId": {
          "__rl": true,
          "value": "d0l6ZepnDYgKyq5P",
          "mode": "list",
          "cachedResultName": "Snowflake Cortex Analyst Subworkflow"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "={{ $('Global Vars').item.json.body.message }}",
            "snowflake_base_url": "={{ $('Global Vars').item.json.snowflake_base_url }}",
            "omni_documents_analyst_agent": "={{ $('Global Vars').item.json.omni_documents_analyst_agent }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "snowflake_base_url",
              "displayName": "snowflake_base_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "omni_documents_analyst_agent",
              "displayName": "omni_documents_analyst_agent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1392,
        400
      ],
      "id": "b4a77a1c-2d31-4929-bc49-8f86d3ad408f",
      "name": "Snowflake Cortex Analyst"
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents (dashboards) using the name",
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.snowflake_base_url }}/api/v2/databases/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_database }}/schemas/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_schema }}/cortex-search-services/{{ $('Global Vars').item.json.omni_documents_search_service.service_name }}:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"{{ $('Global Vars').item.json.body.message }}\",\n    \"columns\": [\n        \"name\",\n        \"identifier\",\n        \"scope\",\n        \"has_dashboard\",\n        \"owner_name\",\n        \"folder_name\",\n        \"folder_id\",\n        \"folder_path\"\n    ],\n    \"filter\": {\n        \"@not\": {\n            \"@eq\": {\n                \"scope\": \"restricted\"\n            }\n        }\n    },\n    \"limit\": 3\n}",
        "options": {},
        "optimizeResponse": true,
        "dataField": "results"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1584,
        352
      ],
      "id": "d7066b20-a3bd-488a-a693-2fa3b4955056",
      "name": "Snowflake Cortex Search Service",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"snowflake_base_url\": \"https://ml16699-hya89079.snowflakecomputing.com\",\n  \"omni_documents_search_service\": {\n    \"snowflake_database\": \"ANALYTICS_DEV\",\n    \"snowflake_schema\": \"DEV_OMNI\",\n    \"service_name\": \"omni_documents_search_service_dev\"\n  },\n  \"omni_documents_analyst_agent\": {\n    \"snowflake_database\": \"SNOWFLAKE_INTELLIGENCE\",\n    \"snowflake_schema\": \"AGENTS\",\n    \"agent_name\": \"OMNI_DOCUMENTS_ANALYST_AGENT\"\n  },\n  \"zapier_slack_response_webhook\": {\n    \"webhook_url\": \"https://hooks.zapier.com/hooks/catch/23046078/u1mp0gx/\"\n  },\n  \"slack\": {\n    \"error_message\": \"The Omni agent could not find relevant dashboards :cry:\"\n  }\n}",
        "includeOtherFields": true,
        "include": "selected",
        "includeFields": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        912,
        0
      ],
      "id": "bf957f8a-c5a3-47cc-83d5-6cec5c9049c2",
      "name": "Global Vars"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You must use both the Snowflake Cortex Search Service and the Snowflake Cortex Analyst tools to find the best document that would answer this request:\n{{ $json.body.message }}\n\nThe Snowflake Cortex Search Service will return a list of results, which represents several documents.\nReturn the output as a structured JSON output of the list of documents, with each document object that minimally contains the following fields:\n- document_id\n- document_name\n- scope\n- has_dashboard\n- folder_name\n- folder_id\n- folder_path",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who has built many dashboards in the Omni Analytics tool, which is a business intelligence tool, that sits on top of Snowflake data through dbt. You triage natural language queries from Stakeholders within the company in order to find the best dashboard (otherwise known as document) to answer the question. Documents, also known as dashboards, are parents of document queries, which are individual queries that run against the data within the parent document. Metadata on the documents and document queries and document query filters are stored in Snowflake and can be accessed through the Cortex Search Service and the Cortex Analyst tools."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1296,
        0
      ],
      "id": "e1bb31d5-9392-42ca-8f5a-2ab313d56474",
      "name": "Cortex Agents",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are given several documents (outputs) in a JSON here:\n```json\n {{ $json.output.toJsonString() }}\n```\nGo through each one of the documents to filter out ones that have has_dashboard=false . \n\nThen extract out the fields from each output.\n- Use the document_id to craft a dashboard_url https://cribl.omniapp.co/dashboards/{document_id} \n- Use the folder_path to craft a folder_url like https://cribl.omniapp.co/f/{folder_path}\n\nThen craft a well formatted slack_message in the tone of a helpful data analyst, using each output document. The message should:\n- tag the user's username, which is `{{ $('Global Vars').item.json.body.user_name }}`. \n- address their original request, which was `{{ $('Global Vars').item.json.body.message }}`\n- should not write word-for-word their original request but instead should extract key words from their request to use to summarize what their original request might be related to \n- say that these dashboards might contain what they need.\n- should list out documents after addressing them.\n- Each document in the slack message should include the {document_name} that is linked to the respective {dashboard_url} and that the document exists in the {folder_name}, which is also linked to the respective {folder_url}.\n- should not include any notes about helping further.\n\nFinally, output in a structured JSON output format with the following keys:\n- message\n- dashboard_urls\n- folder_urls\n\nThe resulting output JSON should be something like this:\n```json\n{\n  \"message\": \"formatted slack message\",\n  \"dashboard_url\": [\n    \"dashboard_url_1\",\n    \"dashboard_url_2\"\n  ],\n  \"folder_urls\": [\n    \"folder_url_1\",\n    \"folder_url_2\"\n  ]\n}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who is well versed with the dashboards you have built in Omni Analytics Business Intelligence tool. You triage requests from company stakeholders who want to find relevant dashboards in the Omni BI tool."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2128,
        -16
      ],
      "id": "af278ce5-7e17-4448-9ae4-c769f33828f2",
      "name": "Response Agent",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        1008,
        288
      ],
      "id": "7fa88629-f385-402a-9be3-82355d5a49f9",
      "name": "Cortex Agent o4-mini",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1184,
        352
      ],
      "id": "cee0c3b5-f657-4ff5-bd0a-40c1e91fff2b",
      "name": "Cortex Agent Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"document_id\": {\n          \"type\": \"string\"\n      },\n      \"document_name\": {\n          \"type\": \"string\"\n      },\n      \"scope\": {\n          \"type\": \"string\"\n      },\n      \"has_dashboard\": {\n          \"type\": \"boolean\"\n      },\n      \"folder_id\": {\n          \"type\": \"string\"\n      },\n      \"folder_name\": {\n          \"type\": \"string\"\n      },\n      \"folder_path\": {\n          \"type\": \"string\"\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1744,
        288
      ],
      "id": "2d22b38a-3f89-47bf-b7b5-155dccfcaf42",
      "name": "Cortex Agent Structured Output Parser"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2000,
        272
      ],
      "id": "735fdd14-681d-4841-897d-58b1c7cb9730",
      "name": "Response Agent o4-mini",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2176,
        336
      ],
      "id": "a0ef0bdb-c292-4cdf-a29d-4dfedcc63681",
      "name": "Response Agent Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      },\n      \"dashboard_urls\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"folder_urls\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2368,
        272
      ],
      "id": "3d2c3dd2-8853-4d2a-af31-395b981b2cfa",
      "name": "Response Agent Structured Output Parser",
      "notesInFlow": true,
      "notes": "Success path"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"array\"\t\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2544,
        256
      ],
      "id": "5b6d9d94-2154-4c7e-9835-d07a2d369f73",
      "name": "Response Agent Structured Output Parser1",
      "notesInFlow": true,
      "notes": "Error path"
    },
    {
      "parameters": {
        "content": "filter for if has error? \nrest of output might still be good? \nerror message send to slack at all? "
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2832,
        352
      ],
      "typeVersion": 1,
      "id": "ddd23fd4-b47f-4d7c-b576-cf8ea9a35611",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Need to search for who started the message, not just the user who emoji'ed. or dont tag user."
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        528,
        272
      ],
      "typeVersion": 1,
      "id": "3fdeea68-f5ea-4200-9b9b-cc64332bb4ae",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.zapier_slack_response_webhook.webhook_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"output\": {{ $json.output.toJsonString() }},\n  \"body\": {{ $('Global Vars').item.json.body.toJsonString() }},\n  \"message\": {{ $('Global Vars').item.json.slack.error_message.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2896,
        160
      ],
      "id": "c25b8c3c-0247-4ef2-9c97-e52ac452a04a",
      "name": "Send Slack Error Message",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.zapier_slack_response_webhook.webhook_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"output\": {{ $json.output.toJsonString() }},\n  \"body\": {{ $('Global Vars').item.json.body.toJsonString() }},\n  \"message\": {{ $json.output.message.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2896,
        -32
      ],
      "id": "c0d3731e-f549-4aa2-8629-ef32ef9f8b2b",
      "name": "Send Slack Success Message",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "content": "# Top down\n- extract key words from message\n- use key words to search similarly named document names\n- using document_ids, find their associated document query names\n  - validate that the query names are similar to key words and to the message\n\n- using document_ids, find their associated document query filters\n  - validate that list of document query filters are similar to key words and to the message\n\n- do for every document \n",
        "height": 368,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1264,
        -480
      ],
      "typeVersion": 1,
      "id": "666609a9-91d9-4c7f-9c39-73add36a3fb7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Bottoms Up\n- extract key words from message\n- use key words to search similarly named document query filters\n- get the list of document query filters and find the document queries associated with them\n  - validate that the query names are similar to key words and to the message\n\n- from the list of document query filters, get their associated documents\n  - validate that list of document names are similar to key words and to the message\n\n\n",
        "height": 368,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1984,
        -480
      ],
      "typeVersion": 1,
      "id": "e4452b91-d830-48ce-b2e7-1959295db4ef",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# ask-data questions\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758010156612549\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758008040422269\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1757955122490669\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758039148424459\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758036683995729\n\n",
        "height": 352,
        "width": 784
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1424,
        -912
      ],
      "typeVersion": 1,
      "id": "e4e24b19-dc89-4195-84b7-53e477fc10b3",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Features\n- filter by user who emoji'ed?\nalec U050E77CEQP\nnathan U06PVBEK9T6\npriya U02CBV3GSM9\nlaura U0544ACG6SV\nmatt U073M1QH10R\nrebecca U099VNZAC3D\njerome U07KD0478CQ\n\n\n\n- filter by person access\n",
        "height": 240,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2336,
        -896
      ],
      "typeVersion": 1,
      "id": "ef745caf-f66e-49fc-9cff-e8a6a30bbd32",
      "name": "Sticky Note5"
    }
  ],
  "connections": {
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Omni Dashboard Discovery",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Omni Dashboard Discovery": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "Omni Dashboard Discovery",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Global Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Snowflake Cortex Analyst": {
      "ai_tool": [
        [
          {
            "node": "Cortex Agents",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Snowflake Cortex Search Service": {
      "ai_tool": [
        [
          {
            "node": "Cortex Agents",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Global Vars": {
      "main": [
        [
          {
            "node": "Cortex Agents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agents": {
      "main": [
        [
          {
            "node": "Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent": {
      "main": [
        [
          {
            "node": "Send Slack Success Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Slack Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent o4-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Agents",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Agents",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Cortex Agent Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Cortex Agents",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent o4-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Response Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Response Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Response Agent Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Response Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent Structured Output Parser1": {
      "ai_outputParser": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Global Vars": [
      {
        "json": {
          "body": {
            "channel_id": "C0912AANW1L",
            "channel_name": "data-eng-test-ai-channel",
            "conversation_id": "C0912AANW1L",
            "message": "customer breakdown",
            "message_ts": "1758666589.914119",
            "user_email": "nkwok@cribl.io",
            "user_first_name": "Nathan",
            "user_last_name": "Kwok",
            "user_name": "nathan_kwok"
          },
          "snowflake_base_url": "https://ml16699-hya89079.snowflakecomputing.com",
          "omni_documents_search_service": {
            "snowflake_database": "ANALYTICS_DEV",
            "snowflake_schema": "DEV_OMNI",
            "service_name": "omni_documents_search_service_dev"
          },
          "omni_documents_analyst_agent": {
            "snowflake_database": "SNOWFLAKE_INTELLIGENCE",
            "snowflake_schema": "AGENTS",
            "agent_name": "OMNI_DOCUMENTS_ANALYST_AGENT"
          },
          "zapier_slack_response_webhook": {
            "webhook_url": "https://hooks.zapier.com/hooks/catch/23046078/u1mp0gx/"
          },
          "slack": {
            "error_message": "The Omni agent could not find relevant dashboards :cry:"
          }
        }
      }
    ],
    "Response Agent": [
      {
        "json": {
          "output": {
            "message": "Hey <@user>, here are the dashboards related to customer experience, support, marketing, and product that might contain the insights you need:\n\n• <https://cribl.omniapp.co/dashboards/1fa9a419|Team: CX Customer Cohorts> in the <https://cribl.omniapp.co/f/Customer Experience|Customer Experience> folder\n• <https://cribl.omniapp.co/dashboards/da2cd10a|Support: Customer Review> in the <https://cribl.omniapp.co/f/Support|Support> folder\n• <https://cribl.omniapp.co/dashboards/3bd15a19|Overview: Customer Account Engagement> in the <https://cribl.omniapp.co/f/Marketing|Marketing> folder\n• <https://cribl.omniapp.co/dashboards/2d76300b|Customer: Use-Case Adoption> in the <https://cribl.omniapp.co/f/Customer Experience|Customer Experience> folder\n• <https://cribl.omniapp.co/dashboards/c4d4e6ec|Customer: Research Report> in the <https://cribl.omniapp.co/f/Marketing|Marketing> folder\n• <https://cribl.omniapp.co/dashboards/credit-consumption|Customer: Cloud Credit Consumption> in the <https://cribl.omniapp.co/f/Product|Product> folder\n• <https://cribl.omniapp.co/dashboards/de229002|Customer: Customer Breakdown> in the <https://cribl.omniapp.co/f/Customer Experience|Customer Experience> folder",
            "dashboard_urls": [
              "https://cribl.omniapp.co/dashboards/1fa9a419",
              "https://cribl.omniapp.co/dashboards/da2cd10a",
              "https://cribl.omniapp.co/dashboards/3bd15a19",
              "https://cribl.omniapp.co/dashboards/2d76300b",
              "https://cribl.omniapp.co/dashboards/c4d4e6ec",
              "https://cribl.omniapp.co/dashboards/credit-consumption",
              "https://cribl.omniapp.co/dashboards/de229002"
            ],
            "folder_urls": [
              "https://cribl.omniapp.co/f/Customer Experience",
              "https://cribl.omniapp.co/f/Support",
              "https://cribl.omniapp.co/f/Marketing",
              "https://cribl.omniapp.co/f/Product"
            ]
          }
        }
      }
    ],
    "Cortex Agents": [
      {
        "json": {
          "output": [
            {
              "document_id": "de229002",
              "document_name": "Customer: Customer Breakdown",
              "scope": "organization",
              "has_dashboard": true,
              "folder_id": "3d5676c9-be8d-47fd-b268-8beae0430608",
              "folder_name": "Customer Experience",
              "folder_path": "customer-experience"
            }
          ]
        }
      }
    ],
    "Webhook": [
      {
        "json": {
          "headers": {
            "connection": "upgrade",
            "host": "agenticflows.xyz",
            "x-real-ip": "34.237.75.253",
            "x-forwarded-for": "34.237.75.253",
            "x-forwarded-proto": "https",
            "x-forwarded-host": "agenticflows.xyz",
            "x-forwarded-port": "443",
            "content-length": "403",
            "authorization": "Basic emFwaWVyOldNRXY4NDlmcGZGVlpYNkdoQjM2MGFmT3JmMWtfRFF2TlhfOFRSSjEzS1U=",
            "content-type": "application/json; charset=utf-8",
            "user-agent": "Zapier",
            "accept": "*/*",
            "accept-encoding": "gzip,deflate"
          },
          "params": {},
          "query": {},
          "body": {
            "channel_id": "C0912AANW1L",
            "channel_name": "data-eng-test-ai-channel",
            "conversation_id": "C0912AANW1L",
            "emoji_user_id": "U06PVBEK9T6",
            "message": "Hi Team, do we have a dashboard that shows the customers daily ingest volume in GB/TB? I cant seem to find it in Omni?",
            "message_ts": "1758696971.562899",
            "user_email": "nkwok@cribl.io",
            "user_first_name": "Nathan",
            "user_last_name": "Kwok",
            "user_name": "nathan_kwok"
          },
          "webhookUrl": "https://agenticflows.xyz/webhook-test/8394a134-6af3-4ec0-b605-3270129037cc",
          "executionMode": "test"
        }
      }
    ]
  },
  "versionId": "cd111044-c063-4e78-a574-ab9c1505f04d",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-03T08:29:23.372Z",
      "updatedAt": "2025-09-03T08:29:23.372Z",
      "role": "workflow:owner",
      "workflowId": "onEJNvmxhmWCE8mY",
      "projectId": "w7JTueqTYNrmBYZn"
    }
  ],
  "tags": []
}