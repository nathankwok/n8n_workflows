{
  "createdAt": "2025-09-03T08:29:23.372Z",
  "updatedAt": "2025-09-26T10:53:54.724Z",
  "id": "onEJNvmxhmWCE8mY",
  "name": "ask-data Omni Dashboard Search",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "authentication": "bearerAuth",
        "path": "97808398-be62-4e69-8cf7-0916688859d8"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 2,
      "position": [
        640,
        -864
      ],
      "id": "d6119acc-bdaa-48ea-a63c-44fa9bc8120e",
      "name": "MCP Server Trigger",
      "webhookId": "97808398-be62-4e69-8cf7-0916688859d8",
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "wzBcRrX0vk64pMBK",
          "name": "Zapier Inbound MCP Server"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "gpt-4",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        592,
        -400
      ],
      "id": "80dc83f2-bc74-4374-8bbb-90945747be0f",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "amfaI9YXiWesQ4eT",
          "name": "Azure Open AI gpt-4"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "omni_dashboard_discovery",
        "text": "you are a helpful assistant",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        704,
        -624
      ],
      "id": "185f8237-2808-43d3-b2ac-e47160384138",
      "name": "Omni Dashboard Discovery",
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents (dashboards) using the name",
        "method": "POST",
        "url": "https://ml16699-hya89079.snowflakecomputing.com/api/v2/databases/analytics_dev/schemas/dev_omni/cortex-search-services/omni_documents_search_service_dev:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"customer breakdown\",\n    \"columns\": [\n        \"name\",\n        \"identifier\",\n        \"scope\",\n        \"owner_name\",\n        \"folder_name\"\n    ],\n    \"filter\": {\n        \"@not\": {\n            \"@eq\": {\n                \"scope\": \"restricted\"\n            }\n        }\n    },\n    \"limit\": 3\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        960,
        -400
      ],
      "id": "ca85f5ca-3561-4c18-96bd-cd39b57c7a87",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "8394a134-6af3-4ec0-b605-3270129037cc",
        "authentication": "basicAuth",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        176,
        0
      ],
      "id": "af795adf-5242-4155-ba03-29e0ebe3feb9",
      "name": "Webhook",
      "webhookId": "8394a134-6af3-4ec0-b605-3270129037cc",
      "alwaysOutputData": true,
      "credentials": {
        "httpBasicAuth": {
          "id": "qYqaYFYnJhcQuBMI",
          "name": "Zapier Inbound Basic Auth Webhook"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"snowflake_base_url\": \"https://ml16699-hya89079.snowflakecomputing.com\",\n  \"omni_documents_search_service\": {\n    \"snowflake_database\": \"ANALYTICS\",\n    \"snowflake_schema\": \"OMNI\",\n    \"service_name\": \"omni_documents_search_service\"\n  },\n  \"omni_document_queries_query_table_search_service\": {\n    \"snowflake_database\": \"ANALYTICS\",\n    \"snowflake_schema\": \"OMNI\",\n    \"agent_name\": \"omni_document_queries_query_table_search_service\"\n  },\n  \"omni_document_queries_query_name_search_service\": {\n    \"snowflake_database\": \"ANALYTICS\",\n    \"snowflake_schema\": \"OMNI\",\n    \"agent_name\": \"omni_document_queries_query_name_search_service\"\n  },\n  \"omni_documents_analyst_agent\": {\n    \"snowflake_database\": \"SNOWFLAKE_INTELLIGENCE\",\n    \"snowflake_schema\": \"AGENTS\",\n    \"agent_name\": \"OMNI_DOCUMENTS_ANALYST_AGENT\"\n  },\n  \"zapier_slack_response_webhook\": {\n    \"webhook_url\": \"https://hooks.zapier.com/hooks/catch/23046078/u1mp0gx/\"\n  },\n  \"slack\": {\n    \"error_message\": \"The Omni agent could not find relevant dashboards :cry:\"\n  },\n  \"omni\":{\n    \"omni_base_url\": \"https://cribl.omniapp.co\",\n    \"model_id\": \"4345b118-cbbe-4f7c-a705-ea0aa8da57c0\"\n  }\n}",
        "includeOtherFields": true,
        "include": "selected",
        "includeFields": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        496,
        0
      ],
      "id": "bf957f8a-c5a3-47cc-83d5-6cec5c9049c2",
      "name": "Global Vars"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<task>\n1. Go through the inptu list of documents to filter out ones that have a false boolean value for `has_dashboard` . \n2. Extract out the fields from each output.\n  - Use the document_id to craft a dashboard_url `https://cribl.omniapp.co/dashboards/{document_id}` \n  - Use the folder_path to craft a folder_url like `https://cribl.omniapp.co/f/{folder_path}`\n3. Then craft a well formatted slack_message in the tone of a helpful data analyst, using each output document, keeping in mind everything in the slack_message_format .\n4. Finally, output in a structured JSON output format with the following keys:\n- message\n- dashboard_urls\n- folder_urls\n</task>\n\n<input>\n```json\n{{ $('Map Reduce Document Count').item.json.output.toJsonString() }}\n```\n</input>\n\n<guidelines>\n\n<slack_message_format>\nThe message should:\n  - tag the user's username, which is `{{ $('Global Vars').item.json.body.user_name }}`. \n  - address their original request, which was `{{ $('Global Vars').item.json.body.message }}`\n  - should not write word-for-word their original request but instead should extract key words from their request to use to summarize what their original request might be related to \n  - say that these dashboards might contain what they need.\n  - should list out documents after addressing them.\n  - Each document in the slack message should include the {document_name} that is linked to the respective {dashboard_url} and that the document exists in the {folder_name}, which is also linked to the respective {folder_url}.\n  - should not include any notes about helping further.\n  - **CRITICAL**: should order the list of document in descending order by the count value, but the count should not be in the message itself.\n  - should limit the number of documents to the top 3 documents by count.\n</slack_message_format>\n\n</guidelines>\n\n\n<output_format>\nThe resulting output JSON should be something like this:\n```json\n{\n  \"message\": \"formatted slack message\",\n  \"dashboard_url\": [\n    \"dashboard_url_1\",\n    \"dashboard_url_2\"\n  ],\n  \"folder_urls\": [\n    \"folder_url_1\",\n    \"folder_url_2\"\n  ]\n}\n</output_format>",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who is well versed with the dashboards you have built in Omni Analytics Business Intelligence tool. You triage requests from company stakeholders who want to find relevant dashboards in the Omni BI tool."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        5232,
        1008
      ],
      "id": "af278ce5-7e17-4448-9ae4-c769f33828f2",
      "name": "Response Agent",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2304,
        272
      ],
      "id": "7fa88629-f385-402a-9be3-82355d5a49f9",
      "name": "Cortex Agent o4-mini",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2464,
        336
      ],
      "id": "cee0c3b5-f657-4ff5-bd0a-40c1e91fff2b",
      "name": "Cortex Agent Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"document_id\": {\n        \"type\": \"string\"\n      },\n      \"document_name\": {\n        \"type\": \"string\"\n      },\n      \"document_scope\": {\n        \"type\": \"string\"\n      },\n      \"has_dashboard\": {\n        \"type\": \"boolean\"\n      },\n      \"folder_path\": {\n        \"type\": \"string\"\n      },\n      \"folder_id\": {\n        \"type\": \"string\"\n      },\n      \"folder_name\": {\n        \"type\": \"string\"\n      },\n      \"owner_name\": {\n        \"type\": \"string\"\n      },\n      \"owner_id\": {\n        \"type\": \"string\" \n      }\n    }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2784,
        272
      ],
      "id": "2d22b38a-3f89-47bf-b7b5-155dccfcaf42",
      "name": "Cortex Agent Structured Output Parser"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        5104,
        1296
      ],
      "id": "735fdd14-681d-4841-897d-58b1c7cb9730",
      "name": "Response Agent o4-mini",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        5280,
        1360
      ],
      "id": "a0ef0bdb-c292-4cdf-a29d-4dfedcc63681",
      "name": "Response Agent Gemini 2.5 Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n      \"message\": {\n        \"type\": \"string\"\n      },\n      \"dashboard_urls\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      },\n      \"folder_urls\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        5472,
        1296
      ],
      "id": "3d2c3dd2-8853-4d2a-af31-395b981b2cfa",
      "name": "Response Agent Structured Output Parser",
      "notesInFlow": true,
      "notes": "Success path"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"array\"\t\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        5472,
        1520
      ],
      "id": "5b6d9d94-2154-4c7e-9835-d07a2d369f73",
      "name": "Response Agent Structured Output Parser1",
      "notesInFlow": true,
      "notes": "Error path"
    },
    {
      "parameters": {
        "content": "filter for if has error? \nrest of output might still be good? \nerror message send to slack at all? "
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5248,
        816
      ],
      "typeVersion": 1,
      "id": "ddd23fd4-b47f-4d7c-b576-cf8ea9a35611",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Need to search for who started the message, not just the user who emoji'ed. or dont tag user."
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        112,
        336
      ],
      "typeVersion": 1,
      "id": "3fdeea68-f5ea-4200-9b9b-cc64332bb4ae",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.zapier_slack_response_webhook.webhook_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"output\": {{ $json.output.toJsonString() }},\n  \"body\": {{ $('Global Vars').item.json.body.toJsonString() }},\n  \"message\": {{ $('Global Vars').item.json.slack.error_message.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6000,
        1184
      ],
      "id": "c25b8c3c-0247-4ef2-9c97-e52ac452a04a",
      "name": "Send Slack Error Message",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.zapier_slack_response_webhook.webhook_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"output\": {{ $('Response Agent').item.json.output.toJsonString() }},\n  \"body\": {{ $('Global Vars').item.json.body.toJsonString() }},\n  \"message\": {{ $('Response Agent').item.json.output.message.toJsonString() }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6000,
        992
      ],
      "id": "c0d3731e-f549-4aa2-8629-ef32ef9f8b2b",
      "name": "Send Slack Success Message",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "content": "# Top down\n- extract key words from message\n- use key words to search similarly named document names\n- using document_ids, find their associated document query names\n  - validate that the query names are similar to key words and to the message\n\n- using document_ids, find their associated document query filters\n  - validate that list of document query filters are similar to key words and to the message\n\n- do for every document \n",
        "height": 368,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -928,
        -1056
      ],
      "typeVersion": 1,
      "id": "666609a9-91d9-4c7f-9c39-73add36a3fb7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# Bottoms Up\n- extract key words from message\n- use key words to search similarly named document query filters\n- get the list of document query filters and find the document queries associated with them\n  - validate that the query names are similar to key words and to the message\n\n- from the list of document query filters, get their associated documents\n  - validate that list of document names are similar to key words and to the message\n\n\n",
        "height": 368,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -208,
        -1056
      ],
      "typeVersion": 1,
      "id": "e4452b91-d830-48ce-b2e7-1959295db4ef",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "# ask-data questions\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758010156612549\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758008040422269\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1757955122490669\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758039148424459\n\nhttps://cribl.slack.com/archives/C02GRDZS7QF/p1758036683995729\n\n",
        "height": 352,
        "width": 784
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -768,
        -1488
      ],
      "typeVersion": 1,
      "id": "e4e24b19-dc89-4195-84b7-53e477fc10b3",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Features\n- filter by user who emoji'ed?\nalec U050E77CEQP\nnathan U06PVBEK9T6\npriya U02CBV3GSM9\nlaura U0544ACG6SV\nmatt U073M1QH10R\nrebecca U099VNZAC3D\njerome U07KD0478CQ\n\nhttps://www.productcompass.pm/p/n8n-mcp-servers-uv\n\n\n\n- filter by person access\n",
        "height": 240,
        "width": 304
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        144,
        -1472
      ],
      "typeVersion": 1,
      "id": "ef745caf-f66e-49fc-9cff-e8a6a30bbd32",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Infra Cleanup\n\n/home/nathankwok/n8n_deployment contains the working dir of n8n\n\nget rid of /home/nathankwok/n8n_deployment/temp_deployment_copy . its just a copy of the working dir\n\n/home/nathankwok/n8n_deployment/temp_deploy.sh tries to deploy with references to the temp_deployment_copy dir\n\ncheck is deploy-n8n-supabase.sh also references temp dir\n\n\n",
        "height": 432,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -192,
        -592
      ],
      "typeVersion": 1,
      "id": "363490c5-fc3a-4a8e-8035-eba6fda4649d",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.omni.omni_base_url }}/api/v1/ai/pick-topic",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"modelId\": \"{{ $json.omni.model_id }}\",\n  \"prompt\": \"{{ $json.body.message }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        768
      ],
      "id": "767ef424-1859-4a37-a5f3-46e1679c05e5",
      "name": "Omni PickTopic API Request 0",
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "qgd1tz9uaILvjXIu",
          "name": "Omni API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.omni.omni_base_url }}/api/v1/ai/pick-topic",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"modelId\": \"{{ $json.omni.model_id }}\",\n  \"prompt\": \"{{ $json.body.message }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        976
      ],
      "id": "57c63bf1-ade2-490e-91f2-8dcbd60a4766",
      "name": "Omni PickTopic API Request 1",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "qgd1tz9uaILvjXIu",
          "name": "Omni API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.omni.omni_base_url }}/api/v1/ai/pick-topic",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"modelId\": \"{{ $json.omni.model_id }}\",\n  \"prompt\": \"{{ $json.body.message }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        1200
      ],
      "id": "212c7037-a962-4ec1-bd2b-a18078409ffc",
      "name": "Omni PickTopic API Request 2",
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "qgd1tz9uaILvjXIu",
          "name": "Omni API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1696,
        960
      ],
      "id": "fedc8e06-1d7f-481f-a54b-2d50bbf79e29",
      "name": "Merge",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "topicName",
              "renameField": true,
              "outputFieldName": "topic_name"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1920,
        976
      ],
      "id": "578d6285-d496-45c3-87f9-4779d1c90c22",
      "name": "Aggregate",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "onError": "continueRegularOutput",
      "notes": "Combine into one list (not unique)"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2416,
        1280
      ],
      "id": "7f673c5a-0670-48fd-b235-5c1447dc4c1f",
      "name": "Cortex Agent Gemini 2.5 Pro1",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents queries with the query name similar to a given topic",
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.snowflake_base_url }}/api/v2/databases/{{ $('Global Vars').item.json.omni_document_queries_query_name_search_service.snowflake_database }}/schemas/{{ $('Global Vars').item.json.omni_document_queries_query_name_search_service.snowflake_schema }}/cortex-search-services/{{ $('Global Vars').item.json.omni_document_queries_query_name_search_service.agent_name }}:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"{{ $fromAI('topic', 'topic name', 'string') }}\",\n    \"columns\": [\n        \"query_name\",\n        \"query_id\",\n        \"document_id\",\n        \"document_scope\",\n        \"query_table\"\n    ],\n    \"filter\": {\n        \"@not\": {\n            \"@eq\": {\n                \"document_scope\": \"restricted\"\n            }\n        }\n    },\n    \"limit\": 4\n}",
        "options": {},
        "optimizeResponse": true,
        "dataField": "results"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2752,
        1264
      ],
      "id": "54db177e-c3f5-4248-837f-95de7597190f",
      "name": "Cortex Search Query Name",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents queries with the query table similar to a given topic",
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.snowflake_base_url }}/api/v2/databases/{{ $('Global Vars').item.json.omni_document_queries_query_table_search_service.snowflake_database }}/schemas/{{ $('Global Vars').item.json.omni_document_queries_query_table_search_service.snowflake_schema }}/cortex-search-services/{{ $('Global Vars').item.json.omni_document_queries_query_table_search_service.agent_name }}:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"{{ $fromAI('topic', 'topic name', 'string') }}\",\n    \"columns\": [\n        \"query_name\",\n        \"query_id\",\n        \"document_id\",\n        \"document_scope\",\n        \"query_table\"\n    ],\n    \"filter\": {\n        \"@not\": {\n            \"@eq\": {\n                \"document_scope\": \"restricted\"\n            }\n        }\n    },\n    \"limit\": 4\n}",
        "options": {},
        "optimizeResponse": true,
        "dataField": "results"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2592,
        1328
      ],
      "id": "20bcc109-07ee-498c-89a0-724ed8d5a3b3",
      "name": "Cortex Search Query Table",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2432,
        1952
      ],
      "id": "4720c678-6194-4469-bef1-f9b26383076d",
      "name": "Cortex Agent Gemini 2.5 Pro2",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You must use the Cortex Search Query Name and the Cortex Search Query Nameto find document query filters that are similar to the topics:\n- Cortex Search Query Name\n- Cortex Search Query Table\n\nYour input is a list of Omni Analytic topics, which are high level objects that describe the underlying dbt model being used to query for business data and analytics. \n\n<task>\n1. **CRITICAL**: Make sure to deduplicate the input topics list so that you have a unique set of topic names\n2. For each topic in the unique set of topic names, give the topic as a string parameter to the tool.\n3. Then aggregate the responses from each tool call into a single list of document query objects.\n</task>\n\n<topics>\n{{ $json.topic_name }}\n</topics>\n\n\nThe Cortex Search Query Name and Cortex Search Query Table tools will return a list of results, which represents document queries. Each document query object is in this structure.\n\n<document_query_structure>\n```json\n{\n\"query_table\": \"engineering__azure_cloud_cost\",\n\"document_scope\": \"organization\",\n\"query_name\": \"Monthly Costs by Usage\",\n\"document_id\": \"45d06a29\",\n\"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\"\n}\n```\n</document_query_structure>\n\n\n\n\n\nReturn the aggregated output as a structured JSON output of the list of document queries, with each document query object in the same structure as document_query_structure.",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who has built many dashboards in the Omni Analytics tool, which is a business intelligence tool, that sits on top of Snowflake data through dbt. You triage natural language queries from Stakeholders within the company in order to find the best dashboard (otherwise known as document) to answer the question. Documents, also known as dashboards, are parents of document queries, which are individual queries that run against the data within the parent document. Metadata on the documents and document queries and document query filters are stored in Snowflake and can be accessed through the Cortex Search Service and the Cortex Analyst tools."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2448,
        976
      ],
      "id": "4be8a680-bee8-4c8c-91a9-08e9300ada59",
      "name": "Cortex Search Query by Topic",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You must use the following core text search services to find documents With names that are similar to the topics:\n- Cortex Search Document Name\n\nYour input is a list of Omni Analytic topics, which are high level objects that describe the underlying dbt model being used to query for business data and analytics. \n\n<task>\n1. **CRITICAL**: Make sure to deduplicate the input topics list so that you have a unique set of topic names .\n2. For each topic in the unique set of topic names, give the topic as a string parameter to the tool. This will return a list of results, each object being a document object in the format of tool_call_response_document_structure .\n3. Then aggregate the responses from each tool call into a single list of document objects.\n4. Modify the keys in each document using the renamed_document_structure schema .\n</task>\n\n<topics>\n{{ $json.topic_name }}\n</topics>\n\n\nThe Cortex Search Document Name tool will return a list of results, which represents documents. Each document object is in the following json structure.\n\n<tool_call_result_document_structure>\n```json\n{\n\"identifier\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"scope\": \"organization\",\n\"name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\"\n}\n```\n</tool_call_result_document_structure>\n\n\n<renamed_document_structure>\n```json\n{\n\"document_id\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"document_scope\": \"organization\",\n\"document_name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\"\n}\n```\n</renamed_document_structure>\n\n\n<output>\nOutput a structured JSON **list** of documents, with each document object in the same schema as renamed_document_structure .\n</output>",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who has built many dashboards in the Omni Analytics tool, which is a business intelligence tool, that sits on top of Snowflake data through dbt. You triage natural language queries from Stakeholders within the company in order to find the best dashboard (otherwise known as document) to answer the question. Documents, also known as dashboards, are parents of document queries, which are individual queries that run against the data within the parent document. Metadata on the documents and document queries and document query filters are stored in Snowflake and can be accessed through the Cortex Search Service and the Cortex Analyst tools."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2448,
        1600
      ],
      "id": "28342eb4-42e8-41f8-adc1-3689566ac7bf",
      "name": "Cortex Search Document by Topic",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2864,
        768
      ],
      "id": "61e18eea-6bda-45e4-8804-5cb0eef94036",
      "name": "Cortex Agent o4-mini3",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "description": "Snowflake Cortex Analyst tool to find relevant documents using SQL",
        "workflowId": {
          "__rl": true,
          "value": "d0l6ZepnDYgKyq5P",
          "mode": "list",
          "cachedResultUrl": "/workflow/d0l6ZepnDYgKyq5P",
          "cachedResultName": "Snowflake Cortex Analyst Subworkflow"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "=Find documents with the following document ids: '{{ $fromAI('document_ids', 'list of document ids', 'json') }}'",
            "snowflake_base_url": "={{ $('Global Vars').item.json.snowflake_base_url }}",
            "omni_documents_analyst_agent": "={{ $('Global Vars').item.json.omni_documents_analyst_agent }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "snowflake_base_url",
              "displayName": "snowflake_base_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "omni_documents_analyst_agent",
              "displayName": "omni_documents_analyst_agent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        3024,
        816
      ],
      "id": "f35aae48-3abb-4c53-baa3-2b51fbb5561b",
      "name": "Snowflake Cortex Analyst1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are given lists of objects with objects representing:\n- document queries\n\n<task>\n1. From the list of document_queries, extract out the list of document_id's. The output from this step should be a list of strings.\n2. Give the list of document ids as a parameter to the Snowflake Cortex Analyst tool to search for document objects. The return from this tool call step should be a list of documents with the document object structure described below.\n3. Then using the list of documents, enrich the original list of document queries, mapping the associated document query using the document_id field from both structures.\n4. Return the list of enriched document queries\n</task>\n\nExample of enriching the document queries with documents:\n1. List of document queries:\n```json\n[\n  {\n    \"query_table\": \"engineering__azure_cloud_cost\",\n    \"document_scope\": \"organization\",\n    \"query_name\": \"Monthly Costs by Usage\",\n    \"document_id\": \"45d06a29\",\n    \"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\"\n  }\n]\n```\n\n2. List of documents:\n```json\n[\n  {\n    \"document_id\": \"45d06a29\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_scope\": \"organization\",\n    \"document_name\": \"Team: Infrastructure Costs\",\n    \"folder_name\": \"Engineering\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"engineering\"\n  }\n]\n```\n\n3. Resulting list of enriched document queries (merged with documents):\n```json\n[\n  {\n    \"document_id\": \"45d06a29\",\n    \"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\",\n    \"query_table\": \"engineering__azure_cloud_cost\",\n    \"document_scope\": \"organization\",\n    \"query_name\": \"Monthly Costs by Usage\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_name\": \"Team: Infrastructure Costs\",\n    \"folder_name\": \"Engineering\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"engineering\"\n  }\n]\n```\n\n\n<guidelines>\n**CRITICAL**:\n- If the tool call fails, do not add in or make up values. You must enrich only from the output of the tool call.\n- If the tool call fails, return an error message. \n- The error message should be the input that was given to the tool word for word.\n</guidelines>\n\n\n<input_document_query_structure>\n```json\n{\n  \"query_table\": \"engineering__azure_cloud_cost\",\n  \"document_scope\": \"organization\",\n  \"query_name\": \"Monthly Costs by Usage\",\n  \"document_id\": \"45d06a29\",\n  \"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\"\n}\n```\n</input_document_query_structure>\n\n\n<tool_call_result_document_structure>\n```json\n{\n  \"document_id\": \"45d06a29\",\n  \"owner_name\": \"John McGuire\",\n  \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n  \"document_scope\": \"organization\",\n  \"document_name\": \"Team: Infrastructure Costs\",\n  \"folder_name\": \"Engineering\",\n  \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n  \"has_dashboard\": true,\n  \"folder_path\": \"engineering\"\n}\n```\n</tool_call_result_document_structure>\n\n\n\n<enriched_document_query_structure>\n```json\n{\n  \"document_id\": \"45d06a29\",\n  \"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\",\n  \"query_table\": \"engineering__azure_cloud_cost\",\n  \"document_scope\": \"organization\",\n  \"query_name\": \"Monthly Costs by Usage\",\n  \"owner_name\": \"John McGuire\",\n  \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n  \"document_name\": \"Team: Infrastructure Costs\",\n  \"folder_name\": \"Engineering\",\n  \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n  \"has_dashboard\": true,\n  \"folder_path\": \"engineering\"\n}\n```\n</enriched_document_query_structure>\n\n\n<input>\n{{ $json.output.toJsonString() }}\n</input>",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2928,
        496
      ],
      "id": "54085b1e-3f4d-411f-8880-a56d0a2be50b",
      "name": "Enrich Document Queries",
      "notesInFlow": true,
      "disabled": true,
      "onError": "continueRegularOutput",
      "notes": "Enriches the document queries with their associated documents"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"document_id\": \"45d06a29\",\n    \"query_table\": \"engineering__azure_cloud_cost\",\n    \"document_scope\": \"organization\",\n    \"query_name\": \"Monthly Costs by Usage\",\n    \"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_name\": \"Team: SDR Manager\",\n    \"folder_name\": \"Marketing\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"marketing\"\n  }\n]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3184,
        752
      ],
      "id": "abb03648-d1bb-42f4-8460-33a79e0b7cfa",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2240,
        1872
      ],
      "id": "197b2c9d-1ce0-4d0b-a892-7cf849e8184d",
      "name": "Search Document Agent",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2272,
        1216
      ],
      "id": "0c937d51-bfcd-486f-b966-e52e5a173d1d",
      "name": "Search Document Query by Topic Agent",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents (dashboards) using the document's name field",
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.snowflake_base_url }}/api/v2/databases/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_database }}/schemas/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_schema }}/cortex-search-services/{{ $('Global Vars').item.json.omni_documents_search_service.service_name }}:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"{{ $fromAI('topic', 'topic name', 'string') }}\",\n    \"columns\": [\n        \"name\",\n        \"identifier\",\n        \"scope\",\n        \"has_dashboard\",\n        \"owner_name\",\n        \"owner_id\",\n        \"folder_name\",\n        \"folder_id\",\n        \"folder_path\"\n    ],\n    \"filter\": {\n      \"@and\": [\n        { \n          \"@not\": {\n            \"@eq\": {\n                \"scope\": \"restricted\"\n            }\n          }\n        },\n        { \n          \"@eq\": {\n              \"has_dashboard\": \"true\"\n          }\n        }\n      ]\n    },\n    \"limit\": 3\n}",
        "options": {},
        "optimizeResponse": true,
        "dataField": "results"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2656,
        1952
      ],
      "id": "ae8a6e0d-59e1-4fef-8e29-594cdecc9d4b",
      "name": "Cortex Search Document Name",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      }
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        4496,
        1232
      ],
      "id": "aa414d4e-f7fe-418c-9699-0139698e929c",
      "name": "Cortex Agent o4-mini4",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are given lists of objects with objects representing:\n- documents\n\n\n<task>\n1. Extract out only the document data into a list, with all keys only from the document_structure schema. There will potentially be duplicate document objects in this list.\n2. Map-reduce the resulting documents by deduplicating the same documents (by document_id) but keeping count of documents with the same id before deduplicating. The count should be an additional key in each document object with each document being unique by the document_id\n3. Output the list of document objects with counts with each object in the schema like map_reduce_count_document_structure .\n</task>\n\n\n<document_structure>\n```json\n{\n\"document_id\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"document_scope\": \"organization\",\n\"document_name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\"\n}\n```\n</document_structure>\n\n\n<map_reduce_count_document_structure>\n```json\n{\n\"document_id\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"document_scope\": \"organization\",\n\"document_name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\",\n\"count\": 3\n}\n```\n</map_reduce_count_document_structure>\n\n\n<input_documents>\n{{ $('Documents Aggregate').item.json.output.toJsonString() }}\n</input_documents>\n\n\n<output_format>\nThe output must be a list of map_reduce_count_document_structure.\nExample:\n```json\n[\n  {\n    \"document_id\": \"959cb1c9\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_scope\": \"organization\",\n    \"document_name\": \"Team: SDR Manager\",\n    \"folder_name\": \"Marketing\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"marketing\",\n    \"count\": 3\n  }\n]\n```\n</output_format>",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4544,
        1008
      ],
      "id": "0bb95b48-316d-4c9a-b312-e066ddd987a2",
      "name": "Map Reduce Document Count",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "Documents with more counts are weighted higher"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4528,
        832
      ],
      "typeVersion": 1,
      "id": "ad514b17-c0bb-4af3-b3f3-28ba9065c21e",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3952,
        976
      ],
      "id": "665f4a35-39b8-4050-856c-acddab34eb11",
      "name": "Merge1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"document_id\": {\n        \"type\": \"string\"\n      },\n      \"document_name\": {\n        \"type\": \"string\"\n      },\n      \"document_scope\": {\n        \"type\": \"string\"\n      },\n      \"has_dashboard\": {\n        \"type\": \"boolean\"\n      },\n      \"folder_path\": {\n        \"type\": \"string\"\n      },\n      \"folder_id\": {\n        \"type\": \"string\"\n      },\n      \"folder_name\": {\n        \"type\": \"string\"\n      },\n      \"owner_name\": {\n        \"type\": \"string\"\n      },\n      \"owner_id\": {\n        \"type\": \"string\" \n      }\n    }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2832,
        1872
      ],
      "id": "29a1dd1a-4a06-4f4d-a9b8-972ea9e3997c",
      "name": "Cortex Search Document by Topic Structured Output"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"query_table\": {\n          \"type\": \"string\"\n      },\n      \"document_scope\": {\n          \"type\": \"string\"\n      },\n      \"query_name\": {\n          \"type\": \"string\"\n      },\n      \"document_id\": {\n          \"type\": \"string\"\n      },\n      \"query_id\": {\n          \"type\": \"string\"\n      }\n    }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2896,
        1216
      ],
      "id": "c56872b8-b18c-43bc-80e3-a3906bf20374",
      "name": "Cortex Search Query by Topic Structured Output"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"document_id\": \"959cb1c9\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_scope\": \"organization\",\n    \"document_name\": \"Team: SDR Manager\",\n    \"folder_name\": \"Marketing\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"marketing\",\n    \"count\": 3\n  }\n]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        4752,
        1232
      ],
      "id": "db18114a-f1cf-43ff-94b2-a0c3293283cd",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents (dashboards) using the document's name field",
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.snowflake_base_url }}/api/v2/databases/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_database }}/schemas/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_schema }}/cortex-search-services/{{ $('Global Vars').item.json.omni_documents_search_service.service_name }}:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"{{ $fromAI('message', ``, 'string') }}\",\n    \"columns\": [\n        \"name\",\n        \"identifier\",\n        \"scope\",\n        \"has_dashboard\",\n        \"owner_name\",\n        \"owner_id\",\n        \"folder_name\",\n        \"folder_id\",\n        \"folder_path\"\n    ],\n    \"filter\": {\n      \"@and\": [\n        { \n          \"@not\": {\n            \"@eq\": {\n                \"scope\": \"restricted\"\n            }\n          }\n        },\n        { \n          \"@eq\": {\n              \"has_dashboard\": \"true\"\n          }\n        }\n      ]\n    },\n    \"limit\": 3\n}",
        "options": {},
        "optimizeResponse": true,
        "dataField": "results"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2624,
        336
      ],
      "id": "d7066b20-a3bd-488a-a693-2fa3b4955056",
      "name": "Cortex Search Document Name 1",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      }
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        2304,
        2672
      ],
      "id": "8e509638-3b94-4431-af3c-3b64457fc4ae",
      "name": "Cortex Agent o4-mini1",
      "credentials": {
        "azureOpenAiApi": {
          "id": "owGiNLHIZQGtrPG1",
          "name": "Azure Open AI o4-mini"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2464,
        2736
      ],
      "id": "b9448a5d-d6da-4a3b-aa43-e839842c1339",
      "name": "Cortex Agent Gemini 2.5 Pro3",
      "credentials": {
        "googlePalmApi": {
          "id": "yw1nLb6Dxz18ENh2",
          "name": "Gemini - Cribl"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"document_id\": {\n        \"type\": \"string\"\n      },\n      \"document_name\": {\n        \"type\": \"string\"\n      },\n      \"document_scope\": {\n        \"type\": \"string\"\n      },\n      \"has_dashboard\": {\n        \"type\": \"boolean\"\n      },\n      \"folder_path\": {\n        \"type\": \"string\"\n      },\n      \"folder_id\": {\n        \"type\": \"string\"\n      },\n      \"folder_name\": {\n        \"type\": \"string\"\n      },\n      \"owner_name\": {\n        \"type\": \"string\"\n      },\n      \"owner_id\": {\n        \"type\": \"string\" \n      }\n    }\n  }\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2784,
        2672
      ],
      "id": "1e7a7a40-cb9a-4d24-846f-4c8266d9256f",
      "name": "Cortex Agent Structured Output Parser1"
    },
    {
      "parameters": {
        "content": "### Cortex Search Document by Message\n- searches for documents\n- uses document name that is similar to the message"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2448,
        -256
      ],
      "typeVersion": 1,
      "id": "e4314983-26e6-4e28-b65e-9225906869d4",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "### Cortex Search Query by Topic\n- searches For document queries\n- uses query_name and query_table that are similar to the topic"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2448,
        752
      ],
      "typeVersion": 1,
      "id": "071a74c6-0067-4dce-84cd-cad62c4fce10",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "### Cortex Search Document by Topic\n- searches For documents\n- uses document name that is similar to the topic"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2080,
        1568
      ],
      "typeVersion": 1,
      "id": "9b995177-3863-49e9-8f6e-2755b4071481",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n<task>\n1. Analyze, understand, and infer the goal of the message.\n2. Extract key words and phrases from the message and the intent/goal of the message. The output of this step should be a single comma sepeparated string of words and phrases.\n3. Give the key words string as a string parameter to the Cortex Search Document Name tool. This tool will return a list of results, each object being a document object in the format of tool_call_response_document_structure .\n2. Modify the keys in each document using the renamed_document_structure schema .\n3. Output the list of documents, which have had their keys modified to the renamed_document_structure .\n</task>\n\n<message>\n{{ $('Global Vars').item.json.body.message }}\n</message>\n\n\n<guidelines>\n## Keyword Extraction\n- should not have 'Omni' as a key word\n- should not have names of specific persons\n- should relate to business metrics, analytics, and types of business data\n- should expand out abbreviations that relate to data and business concepts (e.g. gigabyte instead of GB or terabyte instead of TB)\n</guidelines>\n\n\n<schemas>\n\n<tool_call_result_document_structure>\nThe Cortex Search Document Name tool will return a list of results, which represents documents. Each document object is in the following json structure.\n\n```json\n{\n\"identifier\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"scope\": \"organization\",\n\"name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\"\n}\n```\n</tool_call_result_document_structure>\n\n\n<renamed_document_structure>\n```json\n{\n  \"document_id\": \"959cb1c9\",\n  \"owner_name\": \"John McGuire\",\n  \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n  \"document_scope\": \"organization\",\n  \"document_name\": \"Team: SDR Manager\",\n  \"folder_name\": \"Marketing\",\n  \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n  \"has_dashboard\": true,\n  \"folder_path\": \"marketing\"\n}\n```\n</renamed_document_structure>\n\n</schemas>\n\n\n<output>\n\nThe output must be a list of renamed_document_structure .\nExample:\n```json\n[\n  {\n    \"document_id\": \"959cb1c9\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_scope\": \"organization\",\n    \"document_name\": \"Team: SDR Manager\",\n    \"folder_name\": \"Marketing\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"marketing\"\n  }\n]\n```\n</output>",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who has built many dashboards in the Omni Analytics tool, which is a business intelligence tool, that sits on top of Snowflake data through dbt. You triage natural language queries from Stakeholders within the company in order to find the best dashboard (otherwise known as document) to answer the question. Documents, also known as dashboards, are parents of document queries, which are individual queries that run against the data within the parent document. Metadata on the documents and document queries and document query filters are stored in Snowflake and can be accessed through the Cortex Search Service and the Cortex Analyst tools."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2448,
        2368
      ],
      "id": "3508424b-fe14-4b17-a22f-4da1f868fabc",
      "name": "Cortex Search Document by Keyword",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n<task>\n1. Give the message as a string parameter to the Cortex Search Document Name tool. This tool will return a list of results, each object being a document object in the format of tool_call_response_document_structure .\n2. Modify the keys in each document using the renamed_document_structure schema .\n3. Output the list of documents, which have had their keys modified to the renamed_document_structure .\n</task>\n\n<message>\n{{ $('Global Vars').item.json.body.message }}\n</message>\n\n\n<schemas>\n\n<tool_call_result_document_structure>\nThe Cortex Search Document Name tool will return a list of results, which represents documents. Each document object is in the following json structure.\n\n```json\n{\n\"identifier\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"scope\": \"organization\",\n\"name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\"\n}\n```\n</tool_call_result_document_structure>\n\n\n<renamed_document_structure>\n```json\n{\n  \"document_id\": \"959cb1c9\",\n  \"owner_name\": \"John McGuire\",\n  \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n  \"document_scope\": \"organization\",\n  \"document_name\": \"Team: SDR Manager\",\n  \"folder_name\": \"Marketing\",\n  \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n  \"has_dashboard\": true,\n  \"folder_path\": \"marketing\"\n}\n```\n</renamed_document_structure>\n\n</schemas>\n\n\n<output>\n\nThe output must be a list of renamed_document_structure .\nExample:\n```json\n[\n  {\n    \"document_id\": \"959cb1c9\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_scope\": \"organization\",\n    \"document_name\": \"Team: SDR Manager\",\n    \"folder_name\": \"Marketing\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"marketing\"\n  }\n]\n```\n</output>",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "You are an expert data analyst who has built many dashboards in the Omni Analytics tool, which is a business intelligence tool, that sits on top of Snowflake data through dbt. You triage natural language queries from Stakeholders within the company in order to find the best dashboard (otherwise known as document) to answer the question. Documents, also known as dashboards, are parents of document queries, which are individual queries that run against the data within the parent document. Metadata on the documents and document queries and document query filters are stored in Snowflake and can be accessed through the Cortex Search Service and the Cortex Analyst tools."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2448,
        -32
      ],
      "id": "e1bb31d5-9392-42ca-8f5a-2ab313d56474",
      "name": "Cortex Search Document by Message",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "### Cortex Search Document by Keyword\n- searches For documents\n- uses document name that is similar to keywords or key concepts extracted from the message"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2448,
        2160
      ],
      "typeVersion": 1,
      "id": "2f50b6ff-abf6-4ff4-a8e6-36f0a55a15ee",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "toolDescription": "Semantic search for documents (dashboards) using the document's name field",
        "method": "POST",
        "url": "={{ $('Global Vars').item.json.snowflake_base_url }}/api/v2/databases/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_database }}/schemas/{{ $('Global Vars').item.json.omni_documents_search_service.snowflake_schema }}/cortex-search-services/{{ $('Global Vars').item.json.omni_documents_search_service.service_name }}:query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"query\": \"{{ $fromAI('message', ``, 'string') }}\",\n    \"columns\": [\n        \"name\",\n        \"identifier\",\n        \"scope\",\n        \"has_dashboard\",\n        \"owner_name\",\n        \"owner_id\",\n        \"folder_name\",\n        \"folder_id\",\n        \"folder_path\"\n    ],\n    \"filter\": {\n      \"@and\": [\n        { \n          \"@not\": {\n            \"@eq\": {\n                \"scope\": \"restricted\"\n            }\n          }\n        },\n        { \n          \"@eq\": {\n              \"has_dashboard\": \"true\"\n          }\n        }\n      ]\n    },\n    \"limit\": 3\n}",
        "options": {},
        "optimizeResponse": true,
        "dataField": "results"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2624,
        2736
      ],
      "id": "257789a9-985c-41da-a079-b73fa3c78717",
      "name": "Cortex Search Document Name1",
      "credentials": {
        "httpBearerAuth": {
          "id": "PnKZCKVe26AxmdDj",
          "name": "Snowflake API"
        }
      }
    },
    {
      "parameters": {
        "content": "You are given lists of objects with objects representing:\n- documents\n- enriched document queries\n\n\n<task>\n1. Aggregate the list of documents and document_queries\n2. Extract out only the document data into a list, with all keys only from the document_structure schema. There will potentially be duplicate document objects in this list.\n3. Map-reduce the resulting documents by deduplicating the same documents (by document_id) but keeping count of documents with the same id before deduplicating. The count should be an additional key in each document object with each document being unique by the document_id\n3. Output the list of document objects with counts with each object in the schema like map_reduce_count_document_structure .\n</task>\n\n\n<enriched_document_query_structure>\n```json\n{\n  \"document_id\": \"45d06a29\",\n  \"query_id\": \"b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964\",\n  \"query_table\": \"engineering__azure_cloud_cost\",\n  \"document_scope\": \"organization\",\n  \"query_name\": \"Monthly Costs by Usage\",\n  \"owner_name\": \"John McGuire\",\n  \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n  \"document_name\": \"Team: Infrastructure Costs\",\n  \"folder_name\": \"Engineering\",\n  \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n  \"has_dashboard\": true,\n  \"folder_path\": \"engineering\"\n}\n```\n</enriched_document_query_structure>\n\n\n<document_structure>\n```json\n{\n\"document_id\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"document_scope\": \"organization\",\n\"document_name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\"\n}\n```\n</document_structure>\n\n\n<map_reduce_count_document_structure>\n```json\n{\n\"document_id\": \"959cb1c9\",\n\"owner_name\": \"John McGuire\",\n\"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n\"document_scope\": \"organization\",\n\"document_name\": \"Team: SDR Manager\",\n\"folder_name\": \"Marketing\",\n\"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n\"has_dashboard\": true,\n\"folder_path\": \"marketing\",\n\"count\": 3\n}\n```\n</map_reduce_count_document_structure>\n\n\n<input_enriched_document_queries>\n{{ $('Enrich Document Queries').item.json.output.toJsonString() }}\n</input_enriched_document_queries>\n\n\n<input_documents>\n{{ $('Cortex Search Document by Topic').item.json.output.toJsonString() }}\n</input_documents>\n\n\n<output_format>\nThe output must be a list of map_reduce_count_document_structure.\nExample:\n```json\n[\n  {\n    \"document_id\": \"959cb1c9\",\n    \"owner_name\": \"John McGuire\",\n    \"owner_id\": \"86a545a6-5958-43e5-8f16-68eb9f148744\",\n    \"document_scope\": \"organization\",\n    \"document_name\": \"Team: SDR Manager\",\n    \"folder_name\": \"Marketing\",\n    \"folder_id\": \"3089bcee-baea-45af-8613-63077f0e9417\",\n    \"has_dashboard\": true,\n    \"folder_path\": \"marketing\",\n    \"count\": 3\n  }\n]\n```\n</output_format>"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4528,
        592
      ],
      "typeVersion": 1,
      "id": "2d9f775f-d245-45b8-b697-7acb5bbe1dbc",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "output"
            }
          ]
        },
        "options": {
          "mergeLists": true
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        4160,
        1008
      ],
      "id": "8b957529-46bf-48c8-9a59-daedb8b66d6c",
      "name": "Documents Aggregate",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cd6534e1-6284-45fd-97db-c6002d062142",
              "name": "document_ids",
              "value": "={{ $json.output.map(item => item.document_id) }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3168,
        960
      ],
      "id": "d2940f54-1fa1-440f-8b88-4d13ce23c813",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "NtleQBA0zDooWi7o",
          "mode": "list",
          "cachedResultUrl": "/workflow/NtleQBA0zDooWi7o",
          "cachedResultName": "Get Documents from Snowflake"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "document_ids": "={{ $json.document_ids }}"
          },
          "matchingColumns": [
            "document_ids"
          ],
          "schema": [
            {
              "id": "document_ids",
              "displayName": "document_ids",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        3376,
        960
      ],
      "id": "85a98de1-f74e-485f-b10b-4d64411f6642",
      "name": "Call 'Get Documents from Snowflake'"
    }
  ],
  "connections": {
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Omni Dashboard Discovery",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Omni Dashboard Discovery": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "Omni Dashboard Discovery",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Global Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global Vars": {
      "main": [
        [
          {
            "node": "Cortex Search Document by Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Omni PickTopic API Request 0",
            "type": "main",
            "index": 0
          },
          {
            "node": "Omni PickTopic API Request 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Omni PickTopic API Request 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Cortex Search Document by Keyword",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent": {
      "main": [
        [
          {
            "node": "Send Slack Success Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Slack Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent o4-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Document by Message",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Document by Message",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Cortex Agent Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Cortex Search Document by Message",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent o4-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Response Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent Gemini 2.5 Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Response Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Response Agent Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Response Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Response Agent Structured Output Parser1": {
      "ai_outputParser": [
        []
      ]
    },
    "Omni PickTopic API Request 2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Omni PickTopic API Request 0": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Omni PickTopic API Request 1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Cortex Search Query by Topic",
            "type": "main",
            "index": 0
          },
          {
            "node": "Cortex Search Document by Topic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent Gemini 2.5 Pro1": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Query by Topic",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Cortex Search Query Name": {
      "ai_tool": [
        [
          {
            "node": "Cortex Search Query by Topic",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Query Table": {
      "ai_tool": [
        [
          {
            "node": "Cortex Search Query by Topic",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent Gemini 2.5 Pro2": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Document by Topic",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Cortex Search Query by Topic": {
      "main": [
        [
          {
            "node": "Enrich Document Queries",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document by Topic": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Cortex Agent o4-mini3": {
      "ai_languageModel": [
        [
          {
            "node": "Enrich Document Queries",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Snowflake Cortex Analyst1": {
      "ai_tool": [
        [
          {
            "node": "Enrich Document Queries",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Enrich Document Queries",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Search Document Agent": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Document by Topic",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search Document Query by Topic Agent": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Query by Topic",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document Name": {
      "ai_tool": [
        [
          {
            "node": "Cortex Search Document by Topic",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Enrich Document Queries": {
      "main": [
        []
      ]
    },
    "Cortex Agent o4-mini4": {
      "ai_languageModel": [
        [
          {
            "node": "Map Reduce Document Count",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Map Reduce Document Count": {
      "main": [
        [
          {
            "node": "Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Documents Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document by Topic Structured Output": {
      "ai_outputParser": [
        [
          {
            "node": "Cortex Search Document by Topic",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Query by Topic Structured Output": {
      "ai_outputParser": [
        [
          {
            "node": "Cortex Search Query by Topic",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Map Reduce Document Count",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document Name 1": {
      "ai_tool": [
        [
          {
            "node": "Cortex Search Document by Message",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent o4-mini1": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Document by Keyword",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Agent Gemini 2.5 Pro3": {
      "ai_languageModel": [
        [
          {
            "node": "Cortex Search Document by Keyword",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Cortex Agent Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Cortex Search Document by Keyword",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document by Message": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document Name1": {
      "ai_tool": [
        [
          {
            "node": "Cortex Search Document by Keyword",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cortex Search Document by Keyword": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Documents Aggregate": {
      "main": [
        [
          {
            "node": "Map Reduce Document Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Call 'Get Documents from Snowflake'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'Get Documents from Snowflake'": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "connection": "upgrade",
            "host": "agenticflows.xyz",
            "x-real-ip": "34.237.75.253",
            "x-forwarded-for": "34.237.75.253",
            "x-forwarded-proto": "https",
            "x-forwarded-host": "agenticflows.xyz",
            "x-forwarded-port": "443",
            "content-length": "403",
            "authorization": "Basic emFwaWVyOldNRXY4NDlmcGZGVlpYNkdoQjM2MGFmT3JmMWtfRFF2TlhfOFRSSjEzS1U=",
            "content-type": "application/json; charset=utf-8",
            "user-agent": "Zapier",
            "accept": "*/*",
            "accept-encoding": "gzip,deflate"
          },
          "params": {},
          "query": {},
          "body": {
            "channel_id": "C0912AANW1L",
            "channel_name": "data-eng-test-ai-channel",
            "conversation_id": "C0912AANW1L",
            "emoji_user_id": "U06PVBEK9T6",
            "message": "Hi Team, do we have a dashboard that shows the customers daily ingest volume in GB/TB? I cant seem to find it in Omni?",
            "message_ts": "1758696971.562899",
            "user_email": "nkwok@cribl.io",
            "user_first_name": "Nathan",
            "user_last_name": "Kwok",
            "user_name": "nathan_kwok"
          },
          "webhookUrl": "https://agenticflows.xyz/webhook-test/8394a134-6af3-4ec0-b605-3270129037cc",
          "executionMode": "test"
        }
      }
    ],
    "Global Vars": [
      {
        "json": {
          "body": {
            "channel_id": "C0912AANW1L",
            "channel_name": "data-eng-test-ai-channel",
            "conversation_id": "C0912AANW1L",
            "emoji_user_id": "U06PVBEK9T6",
            "message": "Hi Team, do we have a dashboard that shows the customers daily ingest volume in GB/TB? I cant seem to find it in Omni?",
            "message_ts": "1758696971.562899",
            "user_email": "nkwok@cribl.io",
            "user_first_name": "Nathan",
            "user_last_name": "Kwok",
            "user_name": "nathan_kwok"
          },
          "snowflake_base_url": "https://ml16699-hya89079.snowflakecomputing.com",
          "omni_documents_search_service": {
            "snowflake_database": "ANALYTICS",
            "snowflake_schema": "OMNI",
            "service_name": "omni_documents_search_service"
          },
          "omni_document_queries_query_table_search_service": {
            "snowflake_database": "ANALYTICS",
            "snowflake_schema": "OMNI",
            "agent_name": "omni_document_queries_query_table_search_service"
          },
          "omni_document_queries_query_name_search_service": {
            "snowflake_database": "ANALYTICS",
            "snowflake_schema": "OMNI",
            "agent_name": "omni_document_queries_query_name_search_service"
          },
          "omni_documents_analyst_agent": {
            "snowflake_database": "SNOWFLAKE_INTELLIGENCE",
            "snowflake_schema": "AGENTS",
            "agent_name": "OMNI_DOCUMENTS_ANALYST_AGENT"
          },
          "zapier_slack_response_webhook": {
            "webhook_url": "https://hooks.zapier.com/hooks/catch/23046078/u1mp0gx/"
          },
          "slack": {
            "error_message": "The Omni agent could not find relevant dashboards :cry:"
          },
          "omni": {
            "omni_base_url": "https://cribl.omniapp.co",
            "model_id": "4345b118-cbbe-4f7c-a705-ea0aa8da57c0"
          }
        }
      }
    ],
    "Cortex Search Document by Topic": [
      {
        "json": {
          "output": [
            {
              "document_id": "621d0118",
              "document_name": "Overview: GTM Partner Metrics",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "revenue",
              "folder_id": "d20366ff-ebb8-42b0-b2ab-9665f0dc4390",
              "folder_name": "Revenue",
              "owner_name": "Laura Knipe",
              "owner_id": "ebf8342f-9b5f-4efc-92b7-b1210c34cfaf"
            },
            {
              "document_id": "959cb1c9",
              "document_name": "Team: SDR Manager",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "marketing",
              "folder_id": "3089bcee-baea-45af-8613-63077f0e9417",
              "folder_name": "Marketing",
              "owner_name": "John McGuire",
              "owner_id": "cf1a03e2-a8fe-493e-9aed-0768d989518a"
            },
            {
              "document_id": "1decf0ae",
              "document_name": "Overview: Release Metrics",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "engineering",
              "folder_id": "101dfb9d-da13-470b-8726-d17ca5adb53f",
              "folder_name": "Engineering",
              "owner_name": "Adam Armagost",
              "owner_id": "433b1608-177f-4449-b7bd-470e9283efcd"
            }
          ]
        }
      }
    ],
    "Cortex Search Query by Topic": [
      {
        "json": {
          "output": [
            {
              "query_table": "engineering__azure_cloud_cost",
              "document_scope": "organization",
              "query_name": "Monthly Costs by Usage",
              "document_id": "45d06a29",
              "query_id": "b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964"
            },
            {
              "query_table": "sales__opp_primary_quote_lines",
              "document_scope": "organization",
              "query_name": "Software Unit Price by Volume Groups (in TB)",
              "document_id": "f36024ab",
              "query_id": "e73859e0-482a-4a06-9ef4-a360a52a55a9"
            },
            {
              "query_table": "product__onprem_telemetry_daily",
              "document_scope": "organization",
              "query_name": "Software - Destinations",
              "document_id": "de229002",
              "query_id": "b6e5460d-4b4b-4b25-9758-49c5f676f13d"
            },
            {
              "query_table": "product__onprem_telemetry_daily",
              "document_scope": "organization",
              "query_name": "Software Activity over Time",
              "document_id": "de229002",
              "query_id": "e052d3a0-a0c4-48f4-9227-00e680f754e1"
            },
            {
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "In/Out Tb (Monthly Estimate)",
              "document_id": "e445af06",
              "query_id": "7c0f56fe-c131-4753-a13b-bd71a2d33537"
            },
            {
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "Edge Software KPIs",
              "document_id": "e445af06",
              "query_id": "e4a10e11-b2cc-49a6-8f4b-3bfb9110ff53"
            },
            {
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "Licenses Using Stream and Data Volume",
              "document_id": "e445af06",
              "query_id": "d1b6eea7-c803-4570-b542-784b635aef1f"
            },
            {
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "Edge Data Volume over Time",
              "document_id": "e445af06",
              "query_id": "d6bc128e-3e93-40a1-b089-1f202fd7f949"
            }
          ]
        }
      }
    ],
    "Cortex Search Document by Message": [
      {
        "json": {
          "output": [
            {
              "document_id": "621d0118",
              "document_name": "Overview: GTM Partner Metrics",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "revenue",
              "folder_id": "d20366ff-ebb8-42b0-b2ab-9665f0dc4390",
              "folder_name": "Revenue",
              "owner_name": "Laura Knipe",
              "owner_id": "ebf8342f-9b5f-4efc-92b7-b1210c34cfaf"
            },
            {
              "document_id": "0e7bb883",
              "document_name": "Overview: Support Metrics",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "support",
              "folder_id": "6d998abd-70e6-4248-b932-72cc8630c269",
              "folder_name": "Support",
              "owner_name": "Adam Armagost",
              "owner_id": "433b1608-177f-4449-b7bd-470e9283efcd"
            },
            {
              "document_id": "credit-consumption",
              "document_name": "Customer: Cloud Credit Consumption",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "product",
              "folder_id": "b69a8af3-5d04-4a3e-b610-9a74f4807de0",
              "folder_name": "Product",
              "owner_name": "Matthew Lim",
              "owner_id": "86a545a6-5958-43e5-8f16-68eb9f148744"
            }
          ]
        }
      }
    ],
    "Cortex Search Document by Keyword": [
      {
        "json": {
          "output": [
            {
              "document_id": "de229002",
              "document_name": "Customer: Customer Breakdown",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "customer-experience",
              "folder_id": "3d5676c9-be8d-47fd-b268-8beae0430608",
              "folder_name": "Customer Experience",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3"
            },
            {
              "document_id": "credit-consumption",
              "document_name": "Customer: Cloud Credit Consumption",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "product",
              "folder_id": "b69a8af3-5d04-4a3e-b610-9a74f4807de0",
              "folder_name": "Product",
              "owner_name": "Matthew Lim",
              "owner_id": "86a545a6-5958-43e5-8f16-68eb9f148744"
            },
            {
              "document_id": "c4d4e6ec",
              "document_name": "Customer: Research Report",
              "document_scope": "organization",
              "has_dashboard": true,
              "folder_path": "marketing",
              "folder_id": "3089bcee-baea-45af-8613-63077f0e9417",
              "folder_name": "Marketing",
              "owner_name": "Priya Gupta",
              "owner_id": "db8271a8-7dd1-4333-b3e7-5486fc3a480f"
            }
          ]
        }
      }
    ],
    "Enrich Document Queries": [
      {
        "json": {
          "output": [
            {
              "document_id": "45d06a29",
              "query_table": "engineering__azure_cloud_cost",
              "document_scope": "organization",
              "query_name": "Monthly Costs by Usage",
              "query_id": "b3fe0946-15c0-4ea5-a6ff-fd8f23ac5964",
              "owner_name": "Matthew Lim",
              "owner_id": "86a545a6-5958-43e5-8f16-68eb9f148744",
              "document_name": "Overview: Azure Cost Metrics",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "f36024ab",
              "query_table": "sales__opp_primary_quote_lines",
              "document_scope": "organization",
              "query_name": "Software Unit Price by Volume Groups (in TB)",
              "query_id": "e73859e0-482a-4a06-9ef4-a360a52a55a9",
              "owner_name": "Laura Knipe",
              "owner_id": "ebf8342f-9b5f-4efc-92b7-b1210c34cfaf",
              "document_name": "Overview: Deal Pricing Summary",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "de229002",
              "query_table": "product__onprem_telemetry_daily",
              "document_scope": "organization",
              "query_name": "Software - Destinations",
              "query_id": "b6e5460d-4b4b-4b25-9758-49c5f676f13d",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3",
              "document_name": "Customer: Customer Breakdown",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "de229002",
              "query_table": "product__onprem_telemetry_daily",
              "document_scope": "organization",
              "query_name": "Software Activity over Time",
              "query_id": "e052d3a0-a0c4-48f4-9227-00e680f754e1",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3",
              "document_name": "Customer: Customer Breakdown",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "e445af06",
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "In/Out Tb (Monthly Estimate)",
              "query_id": "7c0f56fe-c131-4753-a13b-bd71a2d33537",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3",
              "document_name": "Product: Cribl Suite - Software",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "e445af06",
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "Edge Software KPIs",
              "query_id": "e4a10e11-b2cc-49a6-8f4b-3bfb9110ff53",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3",
              "document_name": "Product: Cribl Suite - Software",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "e445af06",
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "Licenses Using Stream and Data Volume",
              "query_id": "d1b6eea7-c803-4570-b542-784b635aef1f",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3",
              "document_name": "Product: Cribl Suite - Software",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            },
            {
              "document_id": "e445af06",
              "query_table": "software_gb_monthly",
              "document_scope": "organization",
              "query_name": "Edge Data Volume over Time",
              "query_id": "d6bc128e-3e93-40a1-b089-1f202fd7f949",
              "owner_name": "Chuck Morris",
              "owner_id": "113ba39e-d2f3-44ff-9225-da17783348a3",
              "document_name": "Product: Cribl Suite - Software",
              "folder_name": "",
              "folder_id": "",
              "has_dashboard": true,
              "folder_path": ""
            }
          ]
        }
      }
    ]
  },
  "versionId": "c25b26b7-cbc6-47a4-a94a-7fb255f28c21",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-03T08:29:23.372Z",
      "updatedAt": "2025-09-03T08:29:23.372Z",
      "role": "workflow:owner",
      "workflowId": "onEJNvmxhmWCE8mY",
      "projectId": "w7JTueqTYNrmBYZn"
    }
  ],
  "tags": []
}