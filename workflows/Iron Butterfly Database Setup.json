{"createdAt":"2025-08-25T08:39:24.257Z","updatedAt":"2025-08-25T08:39:24.257Z","id":"xKKwDtE8PSN9rOmK","name":"Iron Butterfly Database Setup","active":false,"isArchived":false,"nodes":[{"id":"manual_trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[250,300],"parameters":{}},{"id":"create_workflow_state","name":"Create workflow_state Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[450,200],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS workflow_state (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  key VARCHAR(255) UNIQUE NOT NULL,\n  value JSONB NOT NULL,\n  expires_at TIMESTAMP,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_positions","name":"Create positions Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[650,200],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS positions (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  symbol VARCHAR(10) NOT NULL,\n  position_type VARCHAR(20) DEFAULT 'IRON_BUTTERFLY',\n  entry_date TIMESTAMP NOT NULL,\n  expiry_date DATE NOT NULL,\n  atm_strike DECIMAL(10,2) NOT NULL,\n  short_call_strike DECIMAL(10,2) NOT NULL,\n  short_put_strike DECIMAL(10,2) NOT NULL,\n  long_call_strike DECIMAL(10,2) NOT NULL,\n  long_put_strike DECIMAL(10,2) NOT NULL,\n  entry_credit DECIMAL(10,2) NOT NULL,\n  max_loss DECIMAL(10,2) NOT NULL,\n  entry_delta DECIMAL(6,4),\n  entry_theta DECIMAL(6,4),\n  entry_iv DECIMAL(6,4),\n  status VARCHAR(20) DEFAULT 'OPEN',\n  closed_date TIMESTAMP,\n  closed_price DECIMAL(10,2),\n  realized_pnl DECIMAL(10,2),\n  close_reason VARCHAR(100),\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_trade_opportunities","name":"Create trade_opportunities Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[850,200],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS trade_opportunities (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  symbol VARCHAR(10) NOT NULL,\n  analysis_date TIMESTAMP NOT NULL,\n  research_score DECIMAL(5,2),\n  risk_score DECIMAL(5,2),\n  composite_score DECIMAL(5,2),\n  credit_received DECIMAL(10,2),\n  max_loss DECIMAL(10,2),\n  delta DECIMAL(6,4),\n  theta DECIMAL(6,4),\n  iv_rank DECIMAL(5,2),\n  liquidity_score DECIMAL(5,2),\n  selected BOOLEAN DEFAULT FALSE,\n  execution_status VARCHAR(20),\n  created_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_error_logs","name":"Create error_logs Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[1050,200],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS error_logs (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  error_type VARCHAR(50) NOT NULL,\n  error_message TEXT,\n  error_context JSONB,\n  severity VARCHAR(20),\n  recovery_action VARCHAR(100),\n  resolved BOOLEAN DEFAULT FALSE,\n  created_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_api_health","name":"Create api_health Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[450,400],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS api_health (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  api_name VARCHAR(50) NOT NULL,\n  error_count INTEGER DEFAULT 0,\n  circuit_state VARCHAR(20) DEFAULT 'CLOSED',\n  circuit_open_time TIMESTAMP,\n  last_success TIMESTAMP,\n  last_failure TIMESTAMP,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_performance_metrics","name":"Create performance_metrics Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[650,400],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS performance_metrics (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  metric_date DATE NOT NULL,\n  daily_pnl DECIMAL(10,2),\n  total_trades INTEGER,\n  winning_trades INTEGER,\n  losing_trades INTEGER,\n  win_rate DECIMAL(5,2),\n  sharpe_ratio DECIMAL(5,2),\n  max_drawdown DECIMAL(5,2),\n  total_delta DECIMAL(6,4),\n  total_theta DECIMAL(6,4),\n  margin_used DECIMAL(12,2),\n  created_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_stock_universe","name":"Create stock_universe Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[850,400],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS stock_universe (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  symbol VARCHAR(10) UNIQUE NOT NULL,\n  name VARCHAR(255),\n  sector VARCHAR(50),\n  market_cap BIGINT,\n  avg_volume BIGINT,\n  options_volume BIGINT,\n  last_price DECIMAL(10,2),\n  last_earnings DATE,\n  next_earnings DATE,\n  enabled BOOLEAN DEFAULT TRUE,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_agent_logs","name":"Create agent_logs Table","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[1050,400],"parameters":{"operation":"executeQuery","query":"CREATE TABLE IF NOT EXISTS agent_logs (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  agent_type VARCHAR(50) NOT NULL,\n  agent_id INTEGER,\n  execution_id VARCHAR(100),\n  input_data JSONB,\n  output_data JSONB,\n  execution_time_ms INTEGER,\n  status VARCHAR(20),\n  error_message TEXT,\n  created_at TIMESTAMP DEFAULT NOW()\n);"}},{"id":"create_indexes","name":"Create Indexes","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[450,600],"parameters":{"operation":"executeQuery","query":"CREATE INDEX IF NOT EXISTS idx_positions_symbol ON positions(symbol);\nCREATE INDEX IF NOT EXISTS idx_positions_status ON positions(status);\nCREATE INDEX IF NOT EXISTS idx_opportunities_date ON trade_opportunities(analysis_date);\nCREATE INDEX IF NOT EXISTS idx_opportunities_symbol ON trade_opportunities(symbol);\nCREATE INDEX IF NOT EXISTS idx_errors_type ON error_logs(error_type);\nCREATE INDEX IF NOT EXISTS idx_errors_created ON error_logs(created_at);\nCREATE INDEX IF NOT EXISTS idx_api_health_name ON api_health(api_name);\nCREATE INDEX IF NOT EXISTS idx_metrics_date ON performance_metrics(metric_date);\nCREATE INDEX IF NOT EXISTS idx_universe_symbol ON stock_universe(symbol);\nCREATE INDEX IF NOT EXISTS idx_agent_logs_type ON agent_logs(agent_type);\nCREATE INDEX IF NOT EXISTS idx_workflow_state_key ON workflow_state(key);\nCREATE INDEX IF NOT EXISTS idx_workflow_state_expires ON workflow_state(expires_at);"}},{"id":"create_functions","name":"Create Database Functions","type":"n8n-nodes-base.postgres","typeVersion":2,"position":[650,600],"parameters":{"operation":"executeQuery","query":"CREATE OR REPLACE FUNCTION increment_error_count(p_api_name VARCHAR)\nRETURNS TABLE(error_count INTEGER, circuit_state VARCHAR) AS $$\nBEGIN\n  UPDATE api_health \n  SET error_count = error_count + 1,\n      last_failure = NOW(),\n      circuit_state = CASE \n        WHEN error_count >= 10 THEN 'OPEN'\n        ELSE circuit_state\n      END,\n      circuit_open_time = CASE\n        WHEN error_count >= 10 AND circuit_state != 'OPEN' THEN NOW()\n        ELSE circuit_open_time\n      END,\n      updated_at = NOW()\n  WHERE api_name = p_api_name;\n  \n  IF NOT FOUND THEN\n    INSERT INTO api_health (api_name, error_count, last_failure)\n    VALUES (p_api_name, 1, NOW());\n  END IF;\n  \n  RETURN QUERY\n  SELECT ah.error_count, ah.circuit_state \n  FROM api_health ah \n  WHERE ah.api_name = p_api_name;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE FUNCTION check_circuit_breaker(p_api_name VARCHAR)\nRETURNS TABLE(can_proceed BOOLEAN, state VARCHAR, wait_time INTEGER) AS $$\nDECLARE\n  v_state VARCHAR;\n  v_open_time TIMESTAMP;\n  v_wait_time INTEGER;\nBEGIN\n  SELECT circuit_state, circuit_open_time \n  INTO v_state, v_open_time\n  FROM api_health \n  WHERE api_name = p_api_name;\n  \n  IF v_state = 'OPEN' THEN\n    v_wait_time := EXTRACT(EPOCH FROM (v_open_time + INTERVAL '60 seconds' - NOW()))::INTEGER;\n    \n    IF v_wait_time <= 0 THEN\n      UPDATE api_health \n      SET circuit_state = 'HALF_OPEN', updated_at = NOW()\n      WHERE api_name = p_api_name;\n      \n      RETURN QUERY SELECT TRUE, 'HALF_OPEN'::VARCHAR, 0;\n    ELSE\n      RETURN QUERY SELECT FALSE, v_state, v_wait_time;\n    END IF;\n  ELSE\n    RETURN QUERY SELECT TRUE, COALESCE(v_state, 'CLOSED'), 0;\n  END IF;\nEND;\n$$ LANGUAGE plpgsql;"}}],"connections":{"Manual Trigger":{"main":[[{"node":"Create workflow_state Table","type":"main","index":0}]]},"Create workflow_state Table":{"main":[[{"node":"Create positions Table","type":"main","index":0}]]},"Create positions Table":{"main":[[{"node":"Create trade_opportunities Table","type":"main","index":0}]]},"Create trade_opportunities Table":{"main":[[{"node":"Create error_logs Table","type":"main","index":0}]]},"Create error_logs Table":{"main":[[{"node":"Create api_health Table","type":"main","index":0}]]},"Create api_health Table":{"main":[[{"node":"Create performance_metrics Table","type":"main","index":0}]]},"Create performance_metrics Table":{"main":[[{"node":"Create stock_universe Table","type":"main","index":0}]]},"Create stock_universe Table":{"main":[[{"node":"Create agent_logs Table","type":"main","index":0}]]},"Create agent_logs Table":{"main":[[{"node":"Create Indexes","type":"main","index":0}]]},"Create Indexes":{"main":[[{"node":"Create Database Functions","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":null,"versionId":"757d6306-6a5e-442a-8082-e980cf49daa1","triggerCount":0,"shared":[{"createdAt":"2025-08-25T08:39:24.257Z","updatedAt":"2025-08-25T08:39:24.257Z","role":"workflow:owner","workflowId":"xKKwDtE8PSN9rOmK","projectId":"w7JTueqTYNrmBYZn"}],"tags":[]}