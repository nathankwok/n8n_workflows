{
  "createdAt": "2025-08-17T08:03:17.888Z",
  "updatedAt": "2025-08-17T08:49:16.061Z",
  "id": "k4DBTSiMOJeDgbFa",
  "name": "Iron Butterfly Strategy Complete",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "functionCode": "// System health checks\nconst checks = {\n  timestamp: new Date().toISOString(),\n  memory: process.memoryUsage().heapUsed / 1024 / 1024,\n  nodeVersion: process.version,\n  uptime: process.uptime()\n};\n\n// Simple health validation\nconst isHealthy = checks.memory < 1024; // Less than 1GB\n\nif (!isHealthy) {\n  throw new Error('System health check failed: ' + JSON.stringify(checks));\n}\n\nconsole.log('System health check passed:', checks);\nreturn [{ json: { health: 'OK', checks } }];"
      },
      "id": "health_check",
      "name": "System Health Check",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        464,
        304
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "functionCode": "// Market hours validation\nconst now = new Date();\nconst easternTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"America/New_York\"}));\nconst hour = easternTime.getHours();\nconst minute = easternTime.getMinutes();\nconst dayOfWeek = easternTime.getDay();\n\n// Basic market hours check (9:30 AM to 4:00 PM ET, Monday-Friday)\nconst isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;\nconst isMarketHours = (hour > 9 || (hour === 9 && minute >= 30)) && hour < 16;\n\nif (!isWeekday) {\n  throw new Error('Market closed: Weekend');\n}\n\nif (!isMarketHours) {\n  throw new Error('Market closed: Outside market hours');\n}\n\nconst timeToClose = (16 - hour) * 60 - minute;\nconsole.log('Market is open. Time to close:', timeToClose, 'minutes');\n\nreturn [{ json: { continue: true, marketStatus: 'OPEN', timeToClose: timeToClose, easternTime: easternTime.toISOString() } }];"
      },
      "id": "market_hours_check",
      "name": "Market Hours Validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        656,
        304
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "functionCode": "// Initialize trading session\nconst sessionId = 'ib_' + new Date().toISOString().replace(/[:.]/g, '_');\nconst config = {\n  sessionId: sessionId,\n  maxPositions: 3,\n  maxCorrelation: 0.6,\n  positionSizePercent: 0.05,\n  minCreditTarget: 0.10,\n  maxWingWidth: 0.03,\n  minIVRank: 30,\n  maxIVRank: 70,\n  targetDTE: 45,\n  minDTE: 21,\n  profitTarget: 0.25,\n  stopLoss: 2.0,\n  deltaThreshold: 0.10\n};\n\nconsole.log('Trading session initialized:', sessionId);\nreturn [{ json: { sessionId: sessionId, config: config, status: 'INITIALIZED', timestamp: new Date().toISOString() } }];"
      },
      "id": "initialization",
      "name": "Initialize Trading Session",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        864,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "// Mock stock universe for demo\nconst stockUniverse = [\n  { symbol: 'AAPL', price: 175.50, avgVolume: 50000000, optionsVolume: 500000, sector: 'Technology' },\n  { symbol: 'MSFT', price: 420.25, avgVolume: 25000000, optionsVolume: 300000, sector: 'Technology' },\n  { symbol: 'GOOGL', price: 152.80, avgVolume: 30000000, optionsVolume: 250000, sector: 'Technology' },\n  { symbol: 'TSLA', price: 248.75, avgVolume: 75000000, optionsVolume: 800000, sector: 'Automotive' },\n  { symbol: 'NVDA', price: 135.40, avgVolume: 45000000, optionsVolume: 600000, sector: 'Technology' },\n  { symbol: 'META', price: 558.20, avgVolume: 20000000, optionsVolume: 180000, sector: 'Technology' },\n  { symbol: 'AMZN', price: 185.30, avgVolume: 35000000, optionsVolume: 220000, sector: 'Consumer' },\n  { symbol: 'SPY', price: 573.25, avgVolume: 80000000, optionsVolume: 2000000, sector: 'ETF' }\n];\n\n// Filter for liquid stocks suitable for Iron Butterfly\nconst liquidStocks = stockUniverse.filter(stock => {\n  return stock.avgVolume > 10000000 && \n         stock.optionsVolume > 100000 && \n         stock.price > 50 && \n         stock.price < 600;\n});\n\nconsole.log('Loaded stock universe:', liquidStocks.length, 'stocks');\nreturn [{ json: { universe: liquidStocks, count: liquidStocks.length, timestamp: new Date().toISOString() } }];"
      },
      "id": "load_universe",
      "name": "Load Stock Universe",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1056,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "const stocks = $input.all()[0].json.universe;\nconst batchSize = Math.ceil(stocks.length / 5);\nconst batches = [];\n\nfor (let i = 0; i < 5; i++) {\n  const start = i * batchSize;\n  const end = Math.min(start + batchSize, stocks.length);\n  if (start < stocks.length) {\n    batches.push({\n      agentId: i + 1,\n      symbols: stocks.slice(start, end),\n      batchSize: end - start,\n      priority: i === 0 ? 'high' : 'normal'\n    });\n  }\n}\n\nconsole.log('Created', batches.length, 'work batches for agents');\nreturn batches;"
      },
      "id": "distribute_work",
      "name": "Distribute Work to Agents",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1264,
        304
      ]
    },
    {
      "parameters": {
        "text": "You are Research Agent #{{$json.agentId}} specializing in Iron Butterfly options analysis.\n\nAnalyze these symbols: {{JSON.stringify($json.symbols)}}\n\nFor each symbol, calculate:\n1. ATM strike (closest to current price)\n2. Wing width (2-3% from ATM)\n3. Credit received estimate (mock: $0.50-2.00)\n4. Max loss (wing width - credit)\n5. Technical score (0-100, mock random)\n6. Liquidity score (based on volume)\n\nReturn JSON array with analysis for each symbol.",
        "options": {}
      },
      "id": "research_agent_1",
      "name": "Research Agent 1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        1440,
        -64
      ]
    },
    {
      "parameters": {
        "text": "You are Research Agent #{{$json.agentId}} specializing in Iron Butterfly options analysis.\n\nAnalyze these symbols: {{JSON.stringify($json.symbols)}}\n\nFor each symbol, calculate:\n1. ATM strike (closest to current price)\n2. Wing width (2-3% from ATM)\n3. Credit received estimate (mock: $0.50-2.00)\n4. Max loss (wing width - credit)\n5. Technical score (0-100, mock random)\n6. Liquidity score (based on volume)\n\nReturn JSON array with analysis for each symbol.",
        "options": {}
      },
      "id": "research_agent_2",
      "name": "Research Agent 2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        1440,
        240
      ]
    },
    {
      "parameters": {
        "text": "You are Research Agent #{{$json.agentId}} specializing in Iron Butterfly options analysis.\n\nAnalyze these symbols: {{JSON.stringify($json.symbols)}}\n\nFor each symbol, calculate:\n1. ATM strike (closest to current price)\n2. Wing width (2-3% from ATM)\n3. Credit received estimate (mock: $0.50-2.00)\n4. Max loss (wing width - credit)\n5. Technical score (0-100, mock random)\n6. Liquidity score (based on volume)\n\nReturn JSON array with analysis for each symbol.",
        "options": {}
      },
      "id": "research_agent_3",
      "name": "Research Agent 3",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        1472,
        704
      ]
    },
    {
      "parameters": {
        "functionCode": "// Collect results from all research agents\nconst allResults = $input.all();\nconst opportunities = [];\n\nfor (const batch of allResults) {\n  if (batch.json && batch.json.symbols) {\n    for (const symbol of batch.json.symbols) {\n      // Mock analysis results\n      const wingWidth = symbol.price * 0.025; // 2.5% wing width\n      const creditReceived = Math.random() * 1.5 + 0.50; // $0.50-2.00\n      const maxLoss = wingWidth - creditReceived;\n      \n      if (maxLoss > 0 && creditReceived > 0.50) {\n        opportunities.push({\n          symbol: symbol.symbol,\n          atmStrike: Math.round(symbol.price),\n          shortCallStrike: Math.round(symbol.price),\n          shortPutStrike: Math.round(symbol.price),\n          longCallStrike: Math.round(symbol.price + wingWidth),\n          longPutStrike: Math.round(symbol.price - wingWidth),\n          creditReceived: creditReceived,\n          maxLoss: maxLoss,\n          delta: (Math.random() - 0.5) * 0.1, // Random delta -0.05 to 0.05\n          theta: Math.random() * 0.05 + 0.02,\n          ivRank: Math.random() * 100,\n          technicalScore: Math.random() * 100,\n          liquidityScore: Math.min(100, symbol.optionsVolume / 10000),\n          compositeScore: Math.random() * 100\n        });\n      }\n    }\n  }\n}\n\n// Sort by composite score\nopportunities.sort((a, b) => b.compositeScore - a.compositeScore);\n\nconsole.log('Found', opportunities.length, 'Iron Butterfly opportunities');\nreturn [{ json: { opportunities: opportunities.slice(0, 10), totalAnalyzed: allResults.length, totalPassed: opportunities.length } }];"
      },
      "id": "aggregate_results",
      "name": "Aggregate Research Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2096,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "const opportunities = $input.all()[0].json.opportunities;\nconst config = $('Initialize Trading Session').item.json.config;\nconst selected = [];\n\n// Select top 3 non-correlated opportunities\nfor (const opp of opportunities) {\n  if (selected.length >= config.maxPositions) break;\n  \n  // Simple correlation check (mock - in reality would check sector/beta)\n  let highCorrelation = false;\n  for (const sel of selected) {\n    if (opp.symbol.substring(0, 2) === sel.symbol.substring(0, 2)) {\n      highCorrelation = true;\n      break;\n    }\n  }\n  \n  if (!highCorrelation && opp.creditReceived >= config.minCreditTarget) {\n    const accountValue = 100000; // Mock $100k account\n    const maxPositionSize = accountValue * config.positionSizePercent;\n    const numberOfContracts = Math.floor(maxPositionSize / (opp.maxLoss * 100));\n    \n    if (numberOfContracts >= 1) {\n      selected.push({\n        ...opp,\n        positionSize: numberOfContracts * opp.maxLoss * 100,\n        numberOfContracts: numberOfContracts\n      });\n    }\n  }\n}\n\nconsole.log('Selected', selected.length, 'trades for execution');\nreturn [{ json: { selectedTrades: selected, rejectedDueToCorrelation: opportunities.length - selected.length } }];"
      },
      "id": "select_trades",
      "name": "Select Top Trades",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2288,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "const selectedTrades = $input.all()[0].json.selectedTrades;\nconst executedTrades = [];\nconst failedTrades = [];\n\nfor (const trade of selectedTrades) {\n  try {\n    // Mock trade execution\n    const orderSuccess = Math.random() > 0.1; // 90% success rate\n    \n    if (orderSuccess) {\n      const executedTrade = {\n        ...trade,\n        orderId: 'IB_' + Date.now() + '_' + trade.symbol,\n        executionTime: new Date().toISOString(),\n        status: 'FILLED',\n        actualCredit: trade.creditReceived * (0.95 + Math.random() * 0.1), // 95-105% of target\n        legs: [\n          { action: 'SELL', strike: trade.shortCallStrike, type: 'CALL', quantity: trade.numberOfContracts },\n          { action: 'SELL', strike: trade.shortPutStrike, type: 'PUT', quantity: trade.numberOfContracts },\n          { action: 'BUY', strike: trade.longCallStrike, type: 'CALL', quantity: trade.numberOfContracts },\n          { action: 'BUY', strike: trade.longPutStrike, type: 'PUT', quantity: trade.numberOfContracts }\n        ]\n      };\n      executedTrades.push(executedTrade);\n      console.log('Executed Iron Butterfly on', trade.symbol);\n    } else {\n      failedTrades.push({ ...trade, error: 'Order rejected by broker' });\n      console.log('Failed to execute trade on', trade.symbol);\n    }\n  } catch (error) {\n    failedTrades.push({ ...trade, error: error.message });\n  }\n}\n\nreturn [{ json: { executedTrades: executedTrades, failedTrades: failedTrades, executionSummary: { successful: executedTrades.length, failed: failedTrades.length } } }];"
      },
      "id": "trading_execution",
      "name": "Execute Trades",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2496,
        304
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "functionCode": "const executionResult = $input.all()[0].json;\nconst executedTrades = executionResult.executedTrades || [];\nconst monitoringActions = [];\n\nfor (const trade of executedTrades) {\n  // Mock position monitoring\n  const currentPrice = trade.atmStrike * (0.98 + Math.random() * 0.04); // ±2% price movement\n  const timeDecay = Math.random() * 0.02; // Random time decay\n  const currentPnL = (trade.actualCredit - timeDecay) * trade.numberOfContracts * 100;\n  const pnlPercent = currentPnL / (trade.maxLoss * trade.numberOfContracts * 100);\n  \n  let action = 'HOLD';\n  let reason = 'Position within parameters';\n  \n  // Check exit conditions\n  if (pnlPercent >= 0.25) {\n    action = 'CLOSE';\n    reason = 'Profit target reached (25%)';\n  } else if (currentPnL <= -2 * trade.actualCredit * trade.numberOfContracts * 100) {\n    action = 'CLOSE';\n    reason = 'Loss limit reached';\n  } else if (Math.abs(currentPrice - trade.atmStrike) / trade.atmStrike > 0.05) {\n    action = 'ADJUST';\n    reason = 'Price moved outside comfort zone';\n  }\n  \n  monitoringActions.push({\n    symbol: trade.symbol,\n    orderId: trade.orderId,\n    action: action,\n    reason: reason,\n    currentPnL: currentPnL,\n    currentPnLPercent: pnlPercent,\n    currentPrice: currentPrice,\n    originalStrike: trade.atmStrike\n  });\n}\n\nconsole.log('Position monitoring completed for', monitoringActions.length, 'positions');\nreturn [{ json: { monitoringActions: monitoringActions, timestamp: new Date().toISOString() } }];"
      },
      "id": "position_monitor",
      "name": "Monitor Positions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2688,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "const error = $input.all()[0].json;\nconsole.log('Error caught:', error);\n\n// Log error and continue workflow\nconst errorLog = {\n  timestamp: new Date().toISOString(),\n  errorType: 'WORKFLOW_ERROR',\n  errorMessage: error.message || 'Unknown error',\n  source: error.source || 'Unknown',\n  severity: 'MEDIUM',\n  recovered: true\n};\n\nreturn [{ json: { error: errorLog, action: 'CONTINUE', message: 'Error logged and workflow continuing' } }];"
      },
      "id": "error_handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        432,
        688
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.monitoringActions.filter(action => action.action === 'CLOSE').length}}",
                    "rightValue": "0",
                    "operator": {
                      "type": "number",
                      "operation": "gt"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "alert_router",
      "name": "Alert Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2896,
        304
      ]
    },
    {
      "parameters": {
        "functionCode": "const monitoringData = $input.all()[0].json;\nconst sessionConfig = $('Initialize Trading Session').item.json.config;\n\n// Generate performance report\nconst report = {\n  sessionId: sessionConfig.sessionId,\n  timestamp: new Date().toISOString(),\n  summary: {\n    totalOpportunities: $('Aggregate Research Results').item.json.totalPassed || 0,\n    tradesSelected: $('Select Top Trades').item.json.selectedTrades?.length || 0,\n    tradesExecuted: $('Execute Trades').item.json.executionSummary?.successful || 0,\n    tradesFailed: $('Execute Trades').item.json.executionSummary?.failed || 0,\n    positionsRequiringAction: monitoringData.monitoringActions?.filter(a => a.action !== 'HOLD').length || 0\n  },\n  performance: {\n    totalPnL: monitoringData.monitoringActions?.reduce((sum, action) => sum + (action.currentPnL || 0), 0) || 0,\n    averagePnLPercent: monitoringData.monitoringActions?.length > 0 ? \n      monitoringData.monitoringActions.reduce((sum, action) => sum + (action.currentPnLPercent || 0), 0) / monitoringData.monitoringActions.length : 0,\n    positionsAtRisk: monitoringData.monitoringActions?.filter(a => a.currentPnLPercent < -0.5).length || 0\n  },\n  nextActions: monitoringData.monitoringActions?.filter(a => a.action !== 'HOLD') || [],\n  systemHealth: 'OPERATIONAL',\n  marketStatus: $('Market Hours Validation').item.json.marketStatus || 'UNKNOWN'\n};\n\nconsole.log('Iron Butterfly session report generated');\nreturn [{ json: report }];"
      },
      "id": "performance_report",
      "name": "Generate Performance Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3088,
        304
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        304
      ],
      "id": "6478c13c-eeb1-408a-9eb5-650b1e06cd6e",
      "name": "Schedule Trigger1"
    }
  ],
  "connections": {
    "System Health Check": {
      "main": [
        [
          {
            "node": "Market Hours Validation",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Market Hours Validation": {
      "main": [
        [
          {
            "node": "Initialize Trading Session",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Trading Session": {
      "main": [
        [
          {
            "node": "Load Stock Universe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Stock Universe": {
      "main": [
        [
          {
            "node": "Distribute Work to Agents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Distribute Work to Agents": {
      "main": [
        [
          {
            "node": "Research Agent 1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Research Agent 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Research Agent 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent 1": {
      "main": [
        [
          {
            "node": "Aggregate Research Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent 2": {
      "main": [
        [
          {
            "node": "Aggregate Research Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent 3": {
      "main": [
        [
          {
            "node": "Aggregate Research Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Research Results": {
      "main": [
        [
          {
            "node": "Select Top Trades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Top Trades": {
      "main": [
        [
          {
            "node": "Execute Trades",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Trades": {
      "main": [
        [
          {
            "node": "Monitor Positions",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitor Positions": {
      "main": [
        [
          {
            "node": "Alert Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alert Router": {
      "main": [
        [
          {
            "node": "Generate Performance Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Performance Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "System Health Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "b1359429-0238-4942-8587-bea5485797d0",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-17T08:03:17.888Z",
      "updatedAt": "2025-08-17T08:03:17.888Z",
      "role": "workflow:owner",
      "workflowId": "k4DBTSiMOJeDgbFa",
      "projectId": "w7JTueqTYNrmBYZn"
    }
  ],
  "tags": []
}