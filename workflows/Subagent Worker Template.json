{"createdAt":"2025-07-19T10:44:49.202Z","updatedAt":"2025-07-19T10:46:12.855Z","id":"hCl6Jfq9jCR92FwZ","name":"Subagent Worker Template","active":false,"isArchived":false,"nodes":[{"id":"execute_workflow_trigger","name":"Execute Workflow Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1,"position":[240,300],"parameters":{}},{"id":"process_batch_info","name":"Process Batch Info","type":"n8n-nodes-base.code","typeVersion":2,"position":[460,300],"parameters":{"mode":"runOnceForAllItems","jsCode":"// Subagent initialization\nconst input = $input.first().json;\nconst batchId = input.batchId;\nconst tasks = input.tasks || [];\nconst workerPoolSize = input.workerPoolSize;\nconst totalBatches = input.totalBatches;\n\nconsole.log(`Subagent Worker ${batchId}/${totalBatches} starting with ${tasks.length} tasks`);\n\n// Prepare tasks for individual processing\nconst processedTasks = tasks.map((task, index) => ({\n  taskId: `${batchId}-${index + 1}`,\n  taskData: task,\n  batchId: batchId,\n  workerInfo: {\n    workerId: batchId,\n    totalWorkers: totalBatches,\n    poolSize: workerPoolSize\n  }\n}));\n\nreturn processedTasks;"}},{"id":"split_tasks","name":"Split Individual Tasks","type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[680,300],"parameters":{"batchSize":1,"options":{}}},{"id":"subagent_ai_processor","name":"Subagent AI Processor","type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[900,300],"parameters":{"promptType":"define","text":"You are Subagent Worker {{ $json.workerInfo.workerId }} of {{ $json.workerInfo.totalWorkers }} in a parallel processing pool.\n\nTask ID: {{ $json.taskId }}\nTask Data: {{ $json.taskData }}\n\nProcess this task thoroughly and return structured results. Include:\n1. Task analysis\n2. Processing results\n3. Any insights or recommendations\n4. Worker metadata (your worker ID and processing timestamp)\n\nBe concise but comprehensive in your analysis."}},{"id":"format_worker_output","name":"Format Worker Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,300],"parameters":{"mode":"runOnceForAllItems","jsCode":"// Format subagent results for orchestrator\nconst results = $input.all().map(item => item.json);\nconst firstResult = results[0];\n\nconst workerOutput = {\n  workerId: firstResult.workerInfo?.workerId || 'unknown',\n  batchId: firstResult.batchId,\n  totalTasks: results.length,\n  processedAt: new Date().toISOString(),\n  results: results.map(result => ({\n    taskId: result.taskId,\n    aiResponse: result.output || result.response || 'No response',\n    status: 'completed'\n  })),\n  summary: {\n    tasksProcessed: results.length,\n    processingTime: Date.now(),\n    workerStatus: 'success'\n  }\n};\n\nconsole.log(`Worker ${workerOutput.workerId} completed ${workerOutput.totalTasks} tasks`);\nreturn [workerOutput];"}}],"connections":{"Execute Workflow Trigger":{"main":[[{"node":"Process Batch Info","type":"main","index":0}]]},"Process Batch Info":{"main":[[{"node":"Split Individual Tasks","type":"main","index":0}]]},"Split Individual Tasks":{"main":[[{"node":"Subagent AI Processor","type":"main","index":0}]]},"Subagent AI Processor":{"main":[[{"node":"Format Worker Output","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","saveManualExecutions":true,"saveExecutionProgress":true},"staticData":null,"meta":null,"pinData":null,"versionId":"d764c09e-00d3-43a2-935f-1ec634777c65","triggerCount":0,"tags":[]}