{
  "createdAt": "2025-07-19T10:45:14.046Z",
  "updatedAt": "2025-07-19T21:15:59.390Z",
  "id": "1SUxGWcwVB0NUU3Q",
  "name": "Dynamic Worker Pool Orchestrator",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "id": "manual_trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Dynamic worker pool calculation\nconst items = $input.all().map(item => item.json);\nconst workerPoolSize = items[0].workerPoolSize || 3; // Default 3 workers\nconst taskList = items[0].tasks || [];\n\n// Calculate optimal batch size for parallel processing\nconst batchSize = Math.max(1, Math.ceil(taskList.length / workerPoolSize));\n\n// Create batches for parallel execution\nconst batches = [];\nfor (let i = 0; i < taskList.length; i += batchSize) {\n  const batch = taskList.slice(i, i + batchSize);\n  batches.push({\n    batchId: Math.floor(i / batchSize) + 1,\n    tasks: batch,\n    workerPoolSize: workerPoolSize,\n    totalBatches: Math.ceil(taskList.length / batchSize),\n    subagentWorkflowId: 'hCl6Jfq9jCR92FwZ'\n  });\n}\n\nconsole.log(`Created ${batches.length} batches for ${workerPoolSize} workers`);\nreturn batches;"
      },
      "id": "calculate_batches",
      "name": "Calculate Worker Pool",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "workflowId": "hCl6Jfq9jCR92FwZ",
        "workflowInputs": {
          "batchId": "={{$json.batchId}}",
          "tasks": "={{$json.tasks}}",
          "workerPoolSize": "={{$json.workerPoolSize}}",
          "totalBatches": "={{$json.totalBatches}}"
        },
        "mode": "each",
        "options": {}
      },
      "id": "execute_subagent",
      "name": "Execute Subagent Worker",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "workerResults",
        "options": {}
      },
      "id": "aggregate_results",
      "name": "Aggregate All Results",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {},
      "id": "orchestrator_synthesis",
      "name": "Orchestrator AI Synthesis",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1340,
        300
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Calculate Worker Pool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Worker Pool": {
      "main": [
        [
          {
            "node": "Execute Subagent Worker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Subagent Worker": {
      "main": [
        [
          {
            "node": "Aggregate All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate All Results": {
      "main": [
        [
          {
            "node": "Orchestrator AI Synthesis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "97eb65e1-346b-4071-a877-9590f9b74cd5",
  "triggerCount": 0,
  "tags": []
}

